<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="NXLVL" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="false">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\UserID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">UserID,email,username,xmppUsername</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="true">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CmntID_CommentUserID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">CommentedID,CommentID</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="false">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\ContentID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">ContentID</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="true">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\ActivityID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">ActivityID</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="true">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\LinkID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">LinkID</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="true">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\ContentUpdate.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">UserID,ContentID</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="false">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\LCUserID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">LCUserID</stringProp>
        <boolProp name="randomOrder">true</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="false">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\Team_ID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">teamId</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="false">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\ActivityTeamID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">ActivityTeamID</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="false">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\Draft_ContentID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">UserID,Draft_ContentId</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set ConfigB" enabled="true">
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\CSV_DATA\OfferID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">OfferID</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PT_NXLVL_Core_API" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">900</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SignUp" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;signupInput&quot;: {
    &quot;email&quot;: &quot;QAtestcore${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}@getnada.com&quot;,
    &quot;firstname&quot;: &quot;test_ ${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}&quot;,
    &quot;lastname&quot;: &quot;account_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}&quot;,
    &quot;password&quot;: &quot;QWRtaW5AMTIz&quot;
  }
},&quot;query&quot;:&quot;mutation SignUp($signupInput: SignupInput) {\n  signUp(signupInput: $signupInput) {\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation SignUp($signupInput: SignupInput) {
  signUp(signupInput: $signupInput) {
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;signupInput&quot;: {
    &quot;email&quot;: &quot;QAtestcore${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}@getnada.com&quot;,
    &quot;firstname&quot;: &quot;test_ ${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}&quot;,
    &quot;lastname&quot;: &quot;account_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}&quot;,
    &quot;password&quot;: &quot;QWRtaW5AMTIz&quot;
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_userId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_userId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:(.*?)}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_userId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">UserID = vars.get(&quot;sParse_userId&quot;);
log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/UserID.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(UserID);
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUsersbyID" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUsers {\n  getUserById(id: 1971) {\n    id\n    firstname\n    lastname\n    username\n    email\n    profileImage\n    backgroundImage\n    provider\n    height\n    weight\n    gender\n    HSGraduationYear\n    SATScore\n    birthDate\n    videoThumbnail\n    backgroundVideoData\n    isAdmin\n    xmppUsername\n    userActivities {\n      activityId\n      id\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUsers {
  getUserById(id: 1971) {
    id
    firstname
    lastname
    username
    email
    profileImage
    backgroundImage
    provider
    height
    weight
    gender
    HSGraduationYear
    SATScore
    birthDate
    videoThumbnail
    backgroundVideoData
    isAdmin
    xmppUsername
    userActivities {
      activityId
      id
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">email</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..email </stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">emailnotfound</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_email" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_email</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;,&quot;email&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_email_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_id" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_id_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_username" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_username</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;username&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_username_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_xmppUsername" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_xmppUsername</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;xmppUsername&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_xmppUsername_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
xmppUsername = vars.get(&quot;sParse_xmppUsername&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/xmppUsername.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(xmppUsername);
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUsersbyMail" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserByEmail {\n  getUserByEmail(email: \&quot;pt@yopmail.com\&quot;) {\n    id\n    firstname\n    lastname\n    username\n    email\n    profileImage\n    backgroundImage\n    provider\n    height\n    weight\n    gender\n    HSGraduationYear\n    SATScore    \n    bio    \n    highSchoolLevel\n    xmppUsername\n    isAdmin\n    backgroundVideoData\n    videoThumbnail\n    uniqueKey\n    birthDate    \n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserByEmail {
  getUserByEmail(email: &quot;pt@yopmail.com&quot;) {
    id
    firstname
    lastname
    username
    email
    profileImage
    backgroundImage
    provider
    height
    weight
    gender
    HSGraduationYear
    SATScore    
    bio    
    highSchoolLevel
    xmppUsername
    isAdmin
    backgroundVideoData
    videoThumbnail
    uniqueKey
    birthDate    
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetPreferenceActivities" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetPreferenceActivities {\n  getPreferenceActivities(searchString: \&quot;Snowboarding\&quot;) {\n    id\n    name\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetPreferenceActivities {
  getPreferenceActivities(searchString: &quot;Snowboarding&quot;) {
    id
    name
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserByUsername" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserByUsername{\n  getUserByUsername(\n  \tusername: \&quot;pa.test.4556\&quot;\n  ){\n  \tfirstname\n    \tid\n    \tlastname\n    \tusername\n    \temail\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserByUsername{
  getUserByUsername(
  	username: &quot;pa.test.4556&quot;
  ){
  	firstname
    	id
    	lastname
    	username
    	email
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUsersByXMPPUsername" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUsersByXMPPUsername{\n  getUsersByXMPPUsername(xmppUsernames: \&quot;${xmppUsername}\&quot;) {\n    firstname\n    lastname\n    username\n    profileImage\n    email\n    id\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUsersByXMPPUsername{
  getUsersByXMPPUsername(xmppUsernames: &quot;${xmppUsername}&quot;) {
    firstname
    lastname
    username
    profileImage
    email
    id
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation CreateContent{\n  createContent(\n  \tcontentArgs: {\n  \t\tallowComments: true,\n    \t\tallowRepost: false,\n    \t\tcontentType: Text,\n    \t\tdescription: \&quot;QA Text Post_${__Random(000000,100000)}\&quot;,\n    \t\tisPinned: false,\n    \t\tuserId: 1863,\n    \t\tvisibility: Public\n  })\n {\n    blobUrl\n    contentId\n    imageContentSignedUrl\n    signedUrl\n    thumbnailSignedUrl\n    videoThumbnailURL\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation CreateContent{
  createContent(
  	contentArgs: {
  		allowComments: true,
    		allowRepost: false,
    		contentType: Text,
    		description: &quot;QA Text Post_${__Random(000000,100000)}&quot;,
    		isPinned: false,
    		userId: 1863,
    		visibility: Public
  })
 {
    blobUrl
    contentId
    imageContentSignedUrl
    signedUrl
    thumbnailSignedUrl
    videoThumbnailURL
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_contentId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_contentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;contentId&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_contentId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
ContentID = vars.get(&quot;sParse_contentId&quot;);
UserID = vars.get(&quot;UserID&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/UserID_ContentID1.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(&quot;UserID:&quot; +UserID+&quot; ContentId:&quot; +ContentID);
f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation CreateContent{\n  createContent(\n  \tcontentArgs: {\n  \t\tallowComments: true,\n    \t\tallowRepost: false,\n    \t\tcontentType: Text,\n    \t\tdescription: \&quot;QA Text Post_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000000,100000)}\&quot;,\n    \t\tisPinned: false,\n    \t\tuserId: ${UserID},\n    \t\tvisibility: Public,\n    \t\tactivityIds: 70\n  })\n {\n    blobUrl\n    contentId\n    imageContentSignedUrl\n    signedUrl\n    thumbnailSignedUrl\n    videoThumbnailURL\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation CreateContent{
  createContent(
  	contentArgs: {
  		allowComments: true,
    		allowRepost: false,
    		contentType: Text,
    		description: &quot;QA Text Post_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000000,100000)}&quot;,
    		isPinned: false,
    		userId: ${UserID},
    		visibility: Public,
    		activityIds: 70
  })
 {
    blobUrl
    contentId
    imageContentSignedUrl
    signedUrl
    thumbnailSignedUrl
    videoThumbnailURL
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_contentId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_contentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;contentId&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_contentId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
ContentID = vars.get(&quot;sParse_contentId&quot;);
UserID = vars.get(&quot;UserID&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/UserID_ContentID1.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(&quot;UserID:&quot; +UserID+&quot; ContentId:&quot; +ContentID);
f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetContentById" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetContentById{\n  getContentById(id: 11586\n) {\n    contentType\n    userId\n    contentData\n    description\n    createdAt\n    updatedAt\n    likeCount\n    commentCount\n    visibility\n    isPublished\n    isLiked\n    isCommented\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetContentById{
  getContentById(id: 11586
) {
    contentType
    userId
    contentData
    description
    createdAt
    updatedAt
    likeCount
    commentCount
    visibility
    isPublished
    isLiked
    isCommented
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${contentid}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetContents" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getContentsArgs&quot;: {
    &quot;activityId&quot;: 70,
    &quot;userId&quot;: 1863,
  }
},&quot;query&quot;:&quot;query GetContents($getContentsArgs: GetContentsArgs) {\n  getContents(getContentsArgs: $getContentsArgs) {\n    pageEdges {\n      node {\n        activityCount\n        activitiesOnContents {\n          activity {\n            name\n            id\n          }\n          activityId\n          content {\n            contentData\n            description\n          }\n          contentId\n          id\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetContents($getContentsArgs: GetContentsArgs) {
  getContents(getContentsArgs: $getContentsArgs) {
    pageEdges {
      node {
        activityCount
        activitiesOnContents {
          activity {
            name
            id
          }
          activityId
          content {
            contentData
            description
          }
          contentId
          id
        }
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getContentsArgs&quot;: {
    &quot;activityId&quot;: 70,
    &quot;userId&quot;: 1863,
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetContents" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetContents{\n  getContents(\n  \tgetContentsArgs: {\n  \t\tuserId: ${UserID}\n  \t})\n  {  \t\n    pageEdges {\n      node {\n        id\n        userId\n        contentData\n        contentTypes\n        description\n        createdAt\n        likeCount\n        commentCount\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetContents{
  getContents(
  	getContentsArgs: {
  		userId: ${UserID}
  	})
  {  	
    pageEdges {
      node {
        id
        userId
        contentData
        contentTypes
        description
        createdAt
        likeCount
        commentCount
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetContents_stress" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetContents{\n  getContents(\n  \tgetContentsArgs: {\n  \t\tuserId: 1\n  \t})\n  {  \t\n    pageEdges {\n      node {\n        id\n        userId\n        contentData\n        contentTypes\n        description\n        createdAt\n        likeCount\n        commentCount\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetContents{
  getContents(
  	getContentsArgs: {
  		userId: 1
  	})
  {  	
    pageEdges {
      node {
        id
        userId
        contentData
        contentTypes
        description
        createdAt
        likeCount
        commentCount
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODI5MzkxODIsImV4cCI6MTY4NTUzMTE4MiwicHJtIjoiZThjN2ExZTY5MjMzZDQwOGI4YWI1MTFhY2QzYzA3YTQiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI4ZWJmNWEyNy01OTIzLTRjMDAtODhiNC1jZWU4NGQyNGQwMGMifQ.SYP9snQ4bTzs-LP7f3uCQ-m-bI2VN3SjOA_fqn14izO2e6clXaSlNGhJ8iQUWDqESxJK7H11Dfz6Wn6OimTpJCnpfpdoKP0g7xtsLYYlf9ZxQdYyLlc5CzjsDQTRs5xrehIK5-d_5Js11KF5PEUaL9nzyoibyXy1PMWBCBff9uYwYvYoBXq5iXAaBBfXyf6HU-xs0MbpUFIacrGRlCN-wnNUpdeOcvPbh721DNMqfVD_golpT5vMDCUZBIUATc71PQbJrhxkuMQfUcU-xj6TZ190DQWpI7WOGHWFimQtUHfcEnE1LwtzgxhjpqCzHLmM2myKDZLHpgPO8c41NlP3mA</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserActivitiesAndInterests" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserActivitiesAndInterests{\n  \tgetUserActivitiesAndInterests(userId: ${UserID}){\n\t \tuserActivities {\n      \tactivityId\n      \tactivityName\n    \t}\n    \tadditionalActivities {\n      \tactivityId\n      \tactivityName\n    \t}\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserActivitiesAndInterests{
  	getUserActivitiesAndInterests(userId: ${UserID}){
	 	userActivities {
      	activityId
      	activityName
    	}
    	additionalActivities {
      	activityId
      	activityName
    	}
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetCommentsByContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetCommentsByContent {\n  getCommentsByContent(contentId: ${ContentID}) {\n    pageEdges {\n      node {\n        id\n        commentText\n        commentedBy\n        commenter {\n          id\n          firstname\n          lastname\n          username\n          email\n        }\n        createdAt\n        parentId\n        likeCount\n        taggedUserIds\n        contentId\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetCommentsByContent {
  getCommentsByContent(contentId: ${ContentID}) {
    pageEdges {
      node {
        id
        commentText
        commentedBy
        commenter {
          id
          firstname
          lastname
          username
          email
        }
        createdAt
        parentId
        likeCount
        taggedUserIds
        contentId
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_CommentId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_CommentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_CommentId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">19</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_commentedBy" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_commentedBy</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;,&quot;commentedBy&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_commentedBy_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">10</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
CommentID = vars.get(&quot;sParse_CommentId&quot;);
CommentedByID = vars.get(&quot;sParse_commentedBy&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/CmntID_CommentUserID.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(&quot;CommentID:&quot; +CommentID+&quot; CommentedByID:&quot; +CommentedByID);
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddLike" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddLike {\n  addLike(\n  \tcontentLikeArgs: {\n  \t\tcontentUserId: 1863,\n  \t\tid: ${ContentID},\n    \t\tlikedBy: 560\n  })\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddLike {
  addLike(
  	contentLikeArgs: {
  		contentUserId: 1863,
  		id: ${ContentID},
    		likedBy: 560
  })
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddComment" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddComment{\n  addComment(\n  \tcontentCommentArgs: {\n    \t\tcontentId: ${ContentID},\n    \t\tcommentText: \&quot;qa api test 1May ${__time(yyMMddHHmmssSSS, cTime)}\&quot;,\n    \t\tcommentedBy: 560,\n    \t\tid: 1863\n  \t}\n  \t) {\n    id\n    commentText\n    commentedBy\n    commenter {\n      id\n      firstname\n      lastname\n      username\n      email\n    }\n    }\n  }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddComment{
  addComment(
  	contentCommentArgs: {
    		contentId: ${ContentID},
    		commentText: &quot;qa api test 1May ${__time(yyMMddHHmmssSSS, cTime)}&quot;,
    		commentedBy: 560,
    		id: 1863
  	}
  	) {
    id
    commentText
    commentedBy
    commenter {
      id
      firstname
      lastname
      username
      email
    }
    }
  }
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_CommentId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_CommentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_CommentId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
CommentID = vars.get(&quot;sParse_CommentId&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/CsvData/ContentData/CommentID.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(CommentID);
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="DeleteContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;deleteContentId&quot;: ${ContentID}
},&quot;query&quot;:&quot;mutation DeleteContent($deleteContentId: Int!) {\n  deleteContent(id: $deleteContentId)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation DeleteContent($deleteContentId: Int!) {
  deleteContent(id: $deleteContentId)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deleteContentId&quot;: ${ContentID}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
ContentID = vars.get(&quot;ContentID&quot;);
//UserID = vars.get(&quot;UserID&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/UserID_ContentIDDeleted.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(&quot;ContentId:&quot; +ContentID);
f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">8000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SaveUserActivity" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation SaveUserActivity {\n  saveUserActivity(userId: ${UserID}, activityId: 1) {\n    preferenceActivity {\n      name\n    }\n    userId\n    user {\n      firstname\n      lastname\n      username\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation SaveUserActivity {
  saveUserActivity(userId: ${UserID}, activityId: 1) {
    preferenceActivity {
      name
    }
    userId
    user {
      firstname
      lastname
      username
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetAllUserActivities" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetAllUserActivities {\n  getAllUserActivities(userId: ${UserID}) {\n    id\n    userId\n    activityId\n    backgroundImage\n    createdAt\n    updatedAt\n    backgroundVideoData\n    videoThumbnail\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetAllUserActivities {
  getAllUserActivities(userId: ${UserID}) {
    id
    userId
    activityId
    backgroundImage
    createdAt
    updatedAt
    backgroundVideoData
    videoThumbnail
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetAllUserActivities" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetAllUserActivities {\n  getAllUserActivities(userId: ${UserID}) {\n    id\n    userId\n    activityId\n    createdAt\n    backgroundImage\n    backgroundVideoData\n    preferenceActivity {\n      id\n      name\n    }\n    updatedAt\n    videoThumbnail\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetAllUserActivities {
  getAllUserActivities(userId: ${UserID}) {
    id
    userId
    activityId
    createdAt
    backgroundImage
    backgroundVideoData
    preferenceActivity {
      id
      name
    }
    updatedAt
    videoThumbnail
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_id" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_id_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_id1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_id1</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_id1_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">3</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
ActivityID = vars.get(&quot;sParse_id&quot;);
ActivityID1 = vars.get(&quot;sParse_id1&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/ActivityID.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(&quot;Activity ID:&quot; +ActivityID+&quot; Activity ID1:&quot; +ActivityID1);
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserActivityAttributeValue" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserActivityAttributeValue{\n  getUserActivityAttributeValue(userId:1698){\n    userId\n    attributeValues {\n      name\n      type\n      value\n      dbUnit\n      userUnit\n      userValue\n      displayValue\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserActivityAttributeValue{
  getUserActivityAttributeValue(userId:1698){
    userId
    attributeValues {
      name
      type
      value
      dbUnit
      userUnit
      userValue
      displayValue
      id
    }
    createdAt
    updatedAt
  }
}
 
  </stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetGroupedAttributes" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetGroupedAttributes{\n  getGroupedAttributes(\n  \tgroupedAttributesInput: {\n  \t\tactivityIds: 27\n  }) {\n    activityId\n    activityName\n    groupedAttributes {\n      name\n      attributes {\n        name\n        activityId\n        id\n      }\n  }\n}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetGroupedAttributes{
  getGroupedAttributes(
  	groupedAttributesInput: {
  		activityIds: 27
  }) {
    activityId
    activityName
    groupedAttributes {
      name
      attributes {
        name
        activityId
        id
      }
  }
}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetLikesByContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetLikesByContent {\n  getLikesByContent(contentId: ${ContentID}) {\n    pageEdges {\n      node {\n        id\n        contentId\n        createdAt\n        likedBy\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetLikesByContent {
  getLikesByContent(contentId: ${ContentID}) {
    pageEdges {
      node {
        id
        contentId
        createdAt
        likedBy
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserActivity" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserActivity {\n  getUserActivity(userActivityId: ${ActivityID}) {\n    activityId\n    id\n    userId\n    preferenceActivity {\n      id\n      name\n    }\n    user {\n      firstname\n      lastname\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserActivity {
  getUserActivity(userActivityId: ${ActivityID}) {
    activityId
    id
    userId
    preferenceActivity {
      id
      name
    }
    user {
      firstname
      lastname
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserInterestData" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserInterestData {\n  getUserInterestData(\n  \tuserId: ${UserID}) \n  \t{\n  \t\ttrendingActivities {\n  \t\t\tid\n      \t\tname\n      \t\trecruitmentStatus\n      \t\tshowTeams\n      \t\tusers {\n      \t\t\tbusinessEmail\n        \t\t\temail\n        \t\t\tfirstname\n        \t\t\tfollowerCount\n        \t\t\tid\n      \t\t}\n  \t\t}\n  \t\tuserInterests {\n  \t\t\tgroupName\n      \t\ticonURL\n      \t\tid\n      \t\tname\n      \t\trecruitmentStatus\n      \t\tshowTeams\n  \t\t}\n  \t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserInterestData {
  getUserInterestData(
  	userId: ${UserID}) 
  	{
  		trendingActivities {
  			id
      		name
      		recruitmentStatus
      		showTeams
      		users {
      			businessEmail
        			email
        			firstname
        			followerCount
        			id
      		}
  		}
  		userInterests {
  			groupName
      		iconURL
      		id
      		name
      		recruitmentStatus
      		showTeams
  		}
  	}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserLinks" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserLinksByCategory {\n  getUserLinksByCategory(userId: ${UserID}) {\n    pageEdges {\n      node {\n        id\n        linkName\n        linkURL\n        userId\n        description\n        companyIcon\n        category\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserLinksByCategory {
  getUserLinksByCategory(userId: ${UserID}) {
    pageEdges {
      node {
        id
        linkName
        linkURL
        userId
        description
        companyIcon
        category
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetNotifications" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetNotifications {\n  getNotifications(userId: ${UserID}) {\n     pageEdges {\n      node {\n        createdAt\n        id\n        isViewed\n        isRead\n        senderId\n      }\n    }\n     pageInfo {\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetNotifications {
  getNotifications(userId: ${UserID}) {
     pageEdges {
      node {
        createdAt
        id
        isViewed
        isRead
        senderId
      }
    }
     pageInfo {
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">150</stringProp>
          <stringProp name="CounterConfig.end">250</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">CounterValue</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateUserLink" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation CreateUserLink {\n  createUserLink(userLinkArgs: {\n    userId: ${UserID},\n    linkName: \&quot;Google\&quot;,\n    linkURL: \&quot;https://www.google.co.in/\&quot;,\n    description: \&quot;QA API Testing for Link URLS_${CounterValue}\&quot;,\n    companyIcon: \&quot;https://i.picsum.photos/id/1/200/300.jpg?hmac=jH5bDkLr6Tgy3oAg5khKCHeunZMHq0ehBZr6vGifPLY\&quot;\n  }) {\n    id\n    userId\n    linkName\n    linkURL\n    description\n    companyIcon\n    orderIndex\n    createdAt\n    updatedAt\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation CreateUserLink {
  createUserLink(userLinkArgs: {
    userId: ${UserID},
    linkName: &quot;Google&quot;,
    linkURL: &quot;https://www.google.co.in/&quot;,
    description: &quot;QA API Testing for Link URLS_${CounterValue}&quot;,
    companyIcon: &quot;https://i.picsum.photos/id/1/200/300.jpg?hmac=jH5bDkLr6Tgy3oAg5khKCHeunZMHq0ehBZr6vGifPLY&quot;
  }) {
    id
    userId
    linkName
    linkURL
    description
    companyIcon
    orderIndex
    createdAt
    updatedAt
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetCommentLikesById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;commentId&quot;: 68852
},&quot;query&quot;:&quot;query GetCommentLikesById{\n  getCommentLikesById(commentId: ${CommentID}) {\n    pageEdges {\n      node {\n        id\n        commentId\n        likedBy\n        createdAt\n      }\n    }\n    pageInfo {\n      totalCount\n      hasNextPage\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetCommentLikesById{
  getCommentLikesById(commentId: ${CommentID}) {
    pageEdges {
      node {
        id
        commentId
        likedBy
        createdAt
      }
    }
    pageInfo {
      totalCount
      hasNextPage
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;commentId&quot;: 68852
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddCommentLike" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddCommentLike{\n  addCommentLike(\n  \tcommentLikeArgs: {\n  \t\tid: ${CommentID},\n  \t\tlikedBy: ${UserID},\n    \t\tcommentUserId: ${CommentedID}\n  \t})\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddCommentLike{
  addCommentLike(
  	commentLikeArgs: {
  		id: ${CommentID},
  		likedBy: ${UserID},
    		commentUserId: ${CommentedID}
  	})
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddCommentLike" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddCommentLike{\n  addCommentLike(\n  \tcommentLikeArgs: {\n  \t\tid: ${sParse_CommentId},\n  \t\tlikedBy: ${CLike_ID},\n    \t\tcommentUserId: ${user_id}\n  \t})\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddCommentLike{
  addCommentLike(
  	commentLikeArgs: {
  		id: ${sParse_CommentId},
  		likedBy: ${CLike_ID},
    		commentUserId: ${user_id}
  	})
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="DeleteUserLink " enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation DeleteUserLink {\n  deleteUserLink(userLinkId: 4340)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation DeleteUserLink {
  deleteUserLink(userLinkId: 4340)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query SearchContent{\n  searchContent(\n  \tsearchContentArgs: {\n  \t\tuserId: ${UserID},\n    \t\tsearchString: \&quot;QA Text\&quot;\n  \t})\n   \t{\n   \t\tpageEdges {\n   \t\t\tnode {\n        \t\t\tcontentType\n        \t\t\tcreatedAt\n        \t\t\tdescription\n        \t\t\tid\n        \t\t\tlikeCount\n        \t\t\tuserId\n      \t\t}\n    \t}\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query SearchContent{
  searchContent(
  	searchContentArgs: {
  		userId: ${UserID},
    		searchString: &quot;QA Text&quot;
  	})
   	{
   		pageEdges {
   			node {
        			contentType
        			createdAt
        			description
        			id
        			likeCount
        			userId
      		}
    	}
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchUser" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query SearchUser {\n\tsearchUser(\n\t\tsearchUserInput: {\n\t\t\tsearchString: \&quot;test\&quot;,\n\t\t\tuserId: ${UserID}\n\t\t}) {\n    pageEdges {\n      node {\n        id\n        firstname\n        lastname\n        username\n      }\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query SearchUser {
	searchUser(
		searchUserInput: {
			searchString: &quot;test&quot;,
			userId: ${UserID}
		}) {
    pageEdges {
      node {
        id
        firstname
        lastname
        username
      }
    }
    pageInfo {
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="UpdateUserSocialFollow" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation UpdateUserSocialFollow{\n  updateUserSocialFollow(\n  \tupdateSocial: {\n  \t\tuserId: ${UserID},\n    \t\tlinkedInLink: \&quot;https:www.google.com\&quot;\n  }) {\n    userId\n    instagramLink\n    twitterLink\n    facebookLink\n    linkedInLink\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation UpdateUserSocialFollow{
  updateUserSocialFollow(
  	updateSocial: {
  		userId: ${UserID},
    		linkedInLink: &quot;https:www.google.com&quot;
  }) {
    userId
    instagramLink
    twitterLink
    facebookLink
    linkedInLink
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserSocialMedia" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserSocialMedia {\n  getUserSocialMedia(userId: ${UserID}) {\n    userId\n    instagramLink\n    twitterLink\n    facebookLink\n    tiktokLink\n    youtubeLink\n    linkedInLink\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserSocialMedia {
  getUserSocialMedia(userId: ${UserID}) {
    userId
    instagramLink
    twitterLink
    facebookLink
    tiktokLink
    youtubeLink
    linkedInLink
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserLinkById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userLinkId&quot;: 5
},&quot;query&quot;:&quot;query GetUserLinkById {\n  getUserLinkById(userLinkId: ${LinkID}) {\n    userId\n    id\n    linkName\n    linkURL\n    description\n    companyIcon\n    orderIndex\n    createdAt\n    updatedAt\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserLinkById {
  getUserLinkById(userLinkId: ${LinkID}) {
    userId
    id
    linkName
    linkURL
    description
    companyIcon
    orderIndex
    createdAt
    updatedAt
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userLinkId&quot;: 5
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetNotificationSetting" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetNotificationSetting{\n  getNotificationSetting(userId: ${UserID}) {\n    notificationBadge\n    advanceNotification\n    userId\n    pushNotifications\n    emailSetting\n    id\n    mutedWords\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetNotificationSetting{
  getNotificationSetting(userId: ${UserID}) {
    notificationBadge
    advanceNotification
    userId
    pushNotifications
    emailSetting
    id
    mutedWords
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddUserAchievement" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddUserAchievement{\n  addUserAchievement(\n  \tuserAchievement: {\n  \t\tid: ${CounterValue},\n    \t\tachievement: \&quot;Volleyball achievement\&quot;,\n    \t\tteam: \&quot;Barcelona\&quot;,\n    \t\tuserId: ${UserID}\n  }) {\n    id\n    achievement\n    team\n    date\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddUserAchievement{
  addUserAchievement(
  	userAchievement: {
  		id: ${CounterValue},
    		achievement: &quot;Volleyball achievement&quot;,
    		team: &quot;Barcelona&quot;,
    		userId: ${UserID}
  }) {
    id
    achievement
    team
    date
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserAchievements" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserAchievements {\n  getUserAchievements(userId: ${UserID}) {\n    id\n    userId\n    achievement\n    team\n    position\n    date\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserAchievements {
  getUserAchievements(userId: ${UserID}) {
    id
    userId
    achievement
    team
    position
    date
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMyFeed" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getMyFeedId&quot;: ${UserID},
  &quot;pageNo&quot;: 2
},&quot;query&quot;:&quot;query GetMyFeed($getMyFeedId: Int!, $pageNo: Int) {\n  getMyFeed(id: $getMyFeedId, pageNo: $pageNo) {\n    pageEdges {\n      node {\n        id\n        contentType\n        userId\n        likeCount\n        commentCount\n        isPublished\n        location\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetMyFeed($getMyFeedId: Int!, $pageNo: Int) {
  getMyFeed(id: $getMyFeedId, pageNo: $pageNo) {
    pageEdges {
      node {
        id
        contentType
        userId
        likeCount
        commentCount
        isPublished
        location
      }
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getMyFeedId&quot;: ${UserID},
  &quot;pageNo&quot;: 2
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetGroupedUserActivities" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetGroupedUserActivities {\n  getGroupedUserActivities(userId: ${UserID}) {\n    userActivities {\n      activityId\n      activityName\n    }\n    groupedUserActivities {\n      name\n      activities {\n        id\n        name\n        users {\n          id\n          firstname\n          lastname\n          username\n          email\n          preferences {\n            userActivity {\n              activityId\n              \n            }\n            groupName\n            recruitmentStatus\n            activitiesOnContents {\n              id\n              contentId\n              content {\n                contentType\n                userId\n                imageURL\n                contentData\n              }\n              activityId\n            }\n          }\n          height\n          weight\n          gender\n          HSGraduationYear\n          bio\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetGroupedUserActivities {
  getGroupedUserActivities(userId: ${UserID}) {
    userActivities {
      activityId
      activityName
    }
    groupedUserActivities {
      name
      activities {
        id
        name
        users {
          id
          firstname
          lastname
          username
          email
          preferences {
            userActivity {
              activityId
              
            }
            groupName
            recruitmentStatus
            activitiesOnContents {
              id
              contentId
              content {
                contentType
                userId
                imageURL
                contentData
              }
              activityId
            }
          }
          height
          weight
          gender
          HSGraduationYear
          bio
        }
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddUserTeam" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddUserTeam{\n  addUserTeam(\n  \tuserTeam: {\n  \t\tinstitutionId: 12296,\n    \t\tuserId: ${UserID}\n  \t}) {\n    institutionId\n    institution {\n      address\n      address1\n      city\n      country\n      id\n      population\n      telephone\n      website\n      zip\n      zip4\n      state\n      name\n    }\n    orderIndex\n    userId\n    id\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddUserTeam{
  addUserTeam(
  	userTeam: {
  		institutionId: 12296,
    		userId: ${UserID}
  	}) {
    institutionId
    institution {
      address
      address1
      city
      country
      id
      population
      telephone
      website
      zip
      zip4
      state
      name
    }
    orderIndex
    userId
    id
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_TeamID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_TeamID</stringProp>
            <stringProp name="RegexExtractor.regex">,&quot;id&quot;:(.*?)}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_TeamID_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
sParse_TeamID = vars.get(&quot;sParse_TeamID&quot;);
UserID = vars.get(&quot;UserID&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/TeamID.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(&quot;UserID:&quot; +UserID+&quot; TeamID:&quot; +sParse_TeamID);
f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserTeams" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserTeams {\n  getUserTeams(userId: ${UserID}) {\n    id\n    userId\n    user {\n      id\n      firstname\n      lastname\n    }\n    institutionId\n    institution {\n      id\n      name\n      address\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserTeams {
  getUserTeams(userId: ${UserID}) {
    id
    userId
    user {
      id
      firstname
      lastname
    }
    institutionId
    institution {
      id
      name
      address
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserTeamById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserTeamById {\n  getUserTeamById(teamId: ${teamId}) {\n    id\n    userId\n    user {\n      id\n      firstname\n      lastname\n      username\n    }\n    institutionId\n    institution {\n      id\n      name\n      address\n      address1\n      city\n      state\n      zip\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserTeamById {
  getUserTeamById(teamId: ${teamId}) {
    id
    userId
    user {
      id
      firstname
      lastname
      username
    }
    institutionId
    institution {
      id
      name
      address
      address1
      city
      state
      zip
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchInstituteByText" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query SearchInstituteByText {\n  searchInstituteByText(searchString: \&quot;McLaughlin\&quot;) {\n    id\n    name\n    address\n    city\n    state\n    zip\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query SearchInstituteByText {
  searchInstituteByText(searchString: &quot;McLaughlin&quot;) {
    id
    name
    address
    city
    state
    zip
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchInstitution" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;searchString&quot;: &quot;McLaughlin&quot;,
  &quot;level&quot;: &quot;MiddleSchool&quot;
},&quot;query&quot;:&quot;query SearchInstitution($searchString: String!, $level: Level) {\n  searchInstitution(searchString: $searchString, level: $level) {\n    address\n    address1\n    city\n    country\n    id\n    name\n    population\n    state\n    telephone\n    zip\n    zip4\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query SearchInstitution($searchString: String!, $level: Level) {
  searchInstitution(searchString: $searchString, level: $level) {
    address
    address1
    city
    country
    id
    name
    population
    state
    telephone
    zip
    zip4
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;searchString&quot;: &quot;McLaughlin&quot;,
  &quot;level&quot;: &quot;MiddleSchool&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="UpdateContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;updateContentId&quot;: ${ContentID},
  &quot;contentArgs&quot;: {
    &quot;userId&quot;: ${UserID},
    &quot;visibility&quot;: &quot;Public&quot;,
    &quot;description&quot;: &quot;QA Testing #QA${__RandomString(4,abcdefghijklmnopqrstuVWXYZ,)}&quot;,
    &quot;contentType&quot;: &quot;Text&quot;,
    &quot;activityIds&quot;: [27,41]
    
  }
},&quot;query&quot;:&quot;mutation UpdateContent($updateContentId: Int!, $contentArgs: ContentArgs!) {\n  updateContent(id: $updateContentId, contentArgs: $contentArgs)  {\n    id\n    contentType\n    userId\n    contentData\n    description\n    likeCount\n    updatedAt\n    createdAt\n    commentCount\n    visibility\n    isPublished\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation UpdateContent($updateContentId: Int!, $contentArgs: ContentArgs!) {
  updateContent(id: $updateContentId, contentArgs: $contentArgs)  {
    id
    contentType
    userId
    contentData
    description
    likeCount
    updatedAt
    createdAt
    commentCount
    visibility
    isPublished
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;updateContentId&quot;: ${ContentID},
  &quot;contentArgs&quot;: {
    &quot;userId&quot;: ${UserID},
    &quot;visibility&quot;: &quot;Public&quot;,
    &quot;description&quot;: &quot;QA Testing #QA${__RandomString(4,abcdefghijklmnopqrstuVWXYZ,)}&quot;,
    &quot;contentType&quot;: &quot;Text&quot;,
    &quot;activityIds&quot;: [27,41]
    
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetTagsByContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetTagsByContent{\n  getTagsByContent(contentId: 21922) {\n    id\n    contentId\n    content {\n      id\n      contentType\n      userId\n      contentData\n      description\n    }\n    tagId\n    createdAt\n    tag {\n      id\n      name\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetTagsByContent{
  getTagsByContent(contentId: 21922) {
    id
    contentId
    content {
      id
      contentType
      userId
      contentData
      description
    }
    tagId
    createdAt
    tag {
      id
      name
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetContentsFromTag" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetContentsFromTag{\n  getContentsFromTag(tagId: 28) {\n    pageEdges {\n      node {\n        id\n        contentId\n        content {\n          id\n          contentType\n          userId\n          imageURL\n          contentData\n          description\n        }\n        tagId\n        tag {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetContentsFromTag{
  getContentsFromTag(tagId: 28) {
    pageEdges {
      node {
        id
        contentId
        content {
          id
          contentType
          userId
          imageURL
          contentData
          description
        }
        tagId
        tag {
          id
          name
        }
        createdAt
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateUserActivityTeam" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation CreateUserActivityTeam {\n  createUserActivityTeam(\n  \tuserActivityTeamInput: {\n  \t\tname: \&quot;Team bad 1\&quot;,\n    \t\tinstitutionId: 2070,\n    \t\tinstitutionName: \&quot;Mclane High School\&quot;,\n    \t\tcity: \&quot;Fresno\&quot;,\n    \t\tstate: \&quot;CA\&quot;,\n    \t\tuserId: ${UserID},\n    \t\tseason: \&quot;2023\&quot;,\n    \t\tactivityId: 27\n\t}\n  \t) {\n    id\n    name\n    institutionId\n    institutionName\n    city\n    state\n    season\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation CreateUserActivityTeam {
  createUserActivityTeam(
  	userActivityTeamInput: {
  		name: &quot;Team bad 1&quot;,
    		institutionId: 2070,
    		institutionName: &quot;Mclane High School&quot;,
    		city: &quot;Fresno&quot;,
    		state: &quot;CA&quot;,
    		userId: ${UserID},
    		season: &quot;2023&quot;,
    		activityId: 27
	}
  	) {
    id
    name
    institutionId
    institutionName
    city
    state
    season
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="DeleteUserActivityTeam" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userActivityTeamId&quot;: ${ActivityTeamID}
},&quot;query&quot;:&quot;mutation DeleteUserActivityTeam($userActivityTeamId: Int!) {\n  deleteUserActivityTeam(userActivityTeamId: $userActivityTeamId)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation DeleteUserActivityTeam($userActivityTeamId: Int!) {
  deleteUserActivityTeam(userActivityTeamId: $userActivityTeamId)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userActivityTeamId&quot;: ${ActivityTeamID}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserActivityTeamById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userActivityTeamId&quot;: ${ActivityTeamID}
},&quot;query&quot;:&quot;query GetUserActivityTeamById($userActivityTeamId: Int!) {\n  getUserActivityTeamById(userActivityTeamId: $userActivityTeamId) {\n    activity {\n      id\n      name\n    }\n    id\n    institution {\n      name\n      id\n    }\n    institutionId\n    institutionName\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserActivityTeamById($userActivityTeamId: Int!) {
  getUserActivityTeamById(userActivityTeamId: $userActivityTeamId) {
    activity {
      id
      name
    }
    id
    institution {
      name
      id
    }
    institutionId
    institutionName
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userActivityTeamId&quot;: ${ActivityTeamID}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetAttributeById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetAttributeById{\n  getAttributeById(attributeId: 27) {\n    name\n    displayName\n    activities {\n      name\n      users {\n        firstname\n        lastname\n        username\n        email\n      }\n      recruitmentStatus\n    }\n    isActivity\n    isSeason\n    isMedia\n    showOnMainProfile\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetAttributeById{
  getAttributeById(attributeId: 27) {
    name
    displayName
    activities {
      name
      users {
        firstname
        lastname
        username
        email
      }
      recruitmentStatus
    }
    isActivity
    isSeason
    isMedia
    showOnMainProfile
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetContentById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getContentByIdId&quot;: 21760
},&quot;query&quot;:&quot;query GetContentById($getContentByIdId: Int!) {\n  getContentById(id: $getContentByIdId) {\n    id\n    contentType\n    contentWidth\n    description\n    createdAt\n    activitiesOnContents {\n      activity {\n        id\n        name\n      }\n      activityId\n    }\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetContentById($getContentByIdId: Int!) {
  getContentById(id: $getContentByIdId) {
    id
    contentType
    contentWidth
    description
    createdAt
    activitiesOnContents {
      activity {
        id
        name
      }
      activityId
    }
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getContentByIdId&quot;: 21760
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_userId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_userId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:(.*?)}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_userId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_ContentID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_ContentID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_ContentID_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_description" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_description</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;description&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_description_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_activityId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_activityId</stringProp>
            <stringProp name="RegexExtractor.regex">,&quot;activityId&quot;:(.*?)}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_activityId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
ContentID1 = vars.get(&quot;sParse_ContentID&quot;);
UserID1 = vars.get(&quot;sParse_userId&quot;);
Description = vars.get(&quot;sParse_description&quot;);
ActivityID = vars.get(&quot;sParse_activityId&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/CsvData/ContentData_Stress/ContentDetails.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(&quot;UserID:&quot; +UserID1+&quot; ContentId:&quot; +ContentID1+&quot; Description:&quot; +Description+&quot; ActivityID:&quot; +ActivityID);
f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateContentDraft" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation CreateContentDraft {\n  createContentDraft(\n  \tcontentArgs: {\n  \t\tuserId: ${UserID},\n    \t\tcontentType: Text,\n    \t\tdescription: \&quot;QA Test Draft content ${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}\&quot;,\n    \t\tvisibility: Public,\n    \t\tactivityIds: [27,41]\n\t}\n  \t) {\n    contentId\n    signedUrl\n    videoThumbnailURL\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation CreateContentDraft {
  createContentDraft(
  	contentArgs: {
  		userId: ${UserID},
    		contentType: Text,
    		description: &quot;QA Test Draft content ${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}&quot;,
    		visibility: Public,
    		activityIds: [27,41]
	}
  	) {
    contentId
    signedUrl
    videoThumbnailURL
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_draftcontentId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_draftcontentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;contentId&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_draftcontentId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
DraftContentID = vars.get(&quot;sParse_draftcontentId&quot;);
UserID = vars.get(&quot;UserID&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/NXLVL_CoreAPIs/Draft_ContentID.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(&quot;UserID:&quot; +UserID+&quot; ContentId:&quot; +DraftContentID);
f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetContentDraftById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetContentDraftById{\n  getContentDraftById(id: ${Draft_ContentId}) {\n    id\n    contentType\n    userId\n    description\n    activitiesOnContentDrafts {\n      activity {\n        id\n        name\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetContentDraftById{
  getContentDraftById(id: ${Draft_ContentId}) {
    id
    contentType
    userId
    description
    activitiesOnContentDrafts {
      activity {
        id
        name
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetAllContentDraft" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetAllContentDraft {\n  getAllContentDraft(userId: ${UserID}, activityId: 27) {\n    id\n    contentType\n    userId\n    contentData\n    createdAt\n    updatedAt\n    visibility\n    isPublished\n    activitiesOnContentDrafts {\n      activity {\n        id\n        name\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetAllContentDraft {
  getAllContentDraft(userId: ${UserID}, activityId: 27) {
    id
    contentType
    userId
    contentData
    createdAt
    updatedAt
    visibility
    isPublished
    activitiesOnContentDrafts {
      activity {
        id
        name
      }
    }
  }
} </stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddUserOffers" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddUserOffers {\n  addUserOffers(\n  \tuserOffer: {\n    \t\tuserId: ${UserID},\n    \t\tdescription: \&quot;QA testing 3\&quot;,\n    \t\tinstitutionId: 17071\n  }) {\n    id\n    userId\n    description\n    user {\n      firstname\n      lastname\n      username\n      email\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddUserOffers {
  addUserOffers(
  	userOffer: {
    		userId: ${UserID},
    		description: &quot;QA testing 3&quot;,
    		institutionId: 17071
  }) {
    id
    userId
    description
    user {
      firstname
      lastname
      username
      email
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserOffers" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserOffers {\n  getUserOffers(userId: ${UserID}) {\n    id\n    userId\n    user {\n      id\n      firstname\n      lastname\n      username\n    }\n    description\n    institutionId\n    institution {\n      address\n      name\n      id\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserOffers {
  getUserOffers(userId: ${UserID}) {
    id
    userId
    user {
      id
      firstname
      lastname
      username
    }
    description
    institutionId
    institution {
      address
      name
      id
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserOfferById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserOfferById {\n  getUserOfferById(offerId: ${OfferID}) {\n    id\n    userId\n    user {\n      id\n      firstname\n      lastname\n    }\n    description\n    institutionId\n    institution {\n      name\n      id\n      address\n      address1\n      city\n      state\n      zip\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserOfferById {
  getUserOfferById(offerId: ${OfferID}) {
    id
    userId
    user {
      id
      firstname
      lastname
    }
    description
    institutionId
    institution {
      name
      id
      address
      address1
      city
      state
      zip
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserActivityTeams" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserActivityTeams {\n  getUserActivityTeams(userId: ${UserID},activityId: 27) {\n    id\n    name\n    institutionId\n    institution {\n      id\n      name\n      address\n      address1\n      city\n      state\n      zip\n      zip4\n      telephone\n      population\n      country\n      website\n    }\n    institutionName\n    city\n    state\n    activityId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserActivityTeams {
  getUserActivityTeams(userId: ${UserID},activityId: 27) {
    id
    name
    institutionId
    institution {
      id
      name
      address
      address1
      city
      state
      zip
      zip4
      telephone
      population
      country
      website
    }
    institutionName
    city
    state
    activityId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetAttributeById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetAttributeById{\n  getAttributeById(attributeId: 2697) {\n    name\n    displayName\n    activities {\n      name\n      users {\n        firstname\n        lastname\n        username\n      }\n      recruitmentStatus\n    }\n    isActivity\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetAttributeById{
  getAttributeById(attributeId: 2697) {
    name
    displayName
    activities {
      name
      users {
        firstname
        lastname
        username
      }
      recruitmentStatus
    }
    isActivity
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchNXTagByText" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query SearchNXTagByText{\n  searchNXTagByText(searchString: \&quot;text\&quot;) {\n    id\n    name\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query SearchNXTagByText{
  searchNXTagByText(searchString: &quot;text&quot;) {
    id
    name
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetTagsByContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetTagsByContent{\n  getTagsByContent(contentId: 21922) {\n    id\n    contentId\n    content {\n      id\n      contentType\n      userId\n      contentData\n      description\n    }\n    tagId\n    createdAt\n    tag {\n      id\n      name\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetTagsByContent{
  getTagsByContent(contentId: 21922) {
    id
    contentId
    content {
      id
      contentType
      userId
      contentData
      description
    }
    tagId
    createdAt
    tag {
      id
      name
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetAttributesWithContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetAttributesWithContent {\n  getAttributesWithContent(userId: ${UserID}, activityId: 27) {\n    id\n    name\n    displayName\n    isActivity\n    isSeason\n    isMedia\n    isFeatured\n   \n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetAttributesWithContent {
  getAttributesWithContent(userId: ${UserID}, activityId: 27) {
    id
    name
    displayName
    isActivity
    isSeason
    isMedia
    isFeatured
   
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddConnection" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddConnection {\n  addConnection(userId: 1699, connectionId: ${UserID})\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddConnection {
  addConnection(userId: 1699, connectionId: ${UserID})
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetConnectionRequests" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: 5
},&quot;query&quot;:&quot;query GetConnectionRequests {\n  getConnectionRequests(userId: ${UserID}) {\n    id\n    userId\n    user {\n      id\n      firstname\n      lastname\n    }\n    connectionUserId\n    createdAt\n    status\n    connectionUser {\n      firstname\n      lastname\n      username\n    }\n    isRequest\n    mutualConnection\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetConnectionRequests {
  getConnectionRequests(userId: ${UserID}) {
    id
    userId
    user {
      id
      firstname
      lastname
    }
    connectionUserId
    createdAt
    status
    connectionUser {
      firstname
      lastname
      username
    }
    isRequest
    mutualConnection
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: 5
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetConnectionStatus" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: 5
},&quot;query&quot;:&quot;query GetConnectionStatus {\n  getConnectionStatus(userId: 1863, connectionId: ${UserID}) {\n    connectionUser {\n      id\n      username\n      firstname\n      lastname\n    }\n    connectionUserId\n    createdAt\n    id\n    status\n    updatedAt\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetConnectionStatus {
  getConnectionStatus(userId: 1863, connectionId: ${UserID}) {
    connectionUser {
      id
      username
      firstname
      lastname
    }
    connectionUserId
    createdAt
    id
    status
    updatedAt
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: 5
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserConnections" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetUserConnections {\n  getUserConnections(userId: ${UserID}) {\n    pageEdges {\n      node {\n        id\n        userId\n        user {\n          firstname\n          lastname\n        }\n        connectionUserId\n        createdAt\n        updatedAt\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserConnections {
  getUserConnections(userId: ${UserID}) {
    pageEdges {
      node {
        id
        userId
        user {
          firstname
          lastname
        }
        connectionUserId
        createdAt
        updatedAt
      }
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetNetworkStatus" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetNetworkStatus {\n  getNetworkStatus(userId: 1863, networkUserId: ${UserID}) {\n    isFollowing(userId: ${UserID})\n    userConnection {\n      userId\n      user {\n        firstname\n        lastname\n      }\n      connectionUserId\n      createdAt\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetNetworkStatus {
  getNetworkStatus(userId: 1863, networkUserId: ${UserID}) {
    isFollowing(userId: ${UserID})
    userConnection {
      userId
      user {
        firstname
        lastname
      }
      connectionUserId
      createdAt
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetSuggestedUsers" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetSuggestedUsers {\n  getSuggestedUsers(searchString: \&quot;test\&quot;, userId: ${UserID}) {\n    pageEdges {\n      node {\n        firstname\n        lastname\n        id\n        mutualConnectionCount\n      }\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetSuggestedUsers {
  getSuggestedUsers(searchString: &quot;test&quot;, userId: ${UserID}) {
    pageEdges {
      node {
        firstname
        lastname
        id
        mutualConnectionCount
      }
    }
    pageInfo {
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="addCustomCategory" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;customCategoryArgs&quot;: {
    &quot;label&quot;: &quot;XYZ&quot;,
    &quot;userId&quot;: ${UserID}
  }
},&quot;query&quot;:&quot;mutation Mutation($customCategoryArgs: CustomCategoryArgs) {\n  addCustomCategory(customCategoryArgs: $customCategoryArgs) {\n    id\n    label\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation Mutation($customCategoryArgs: CustomCategoryArgs) {
  addCustomCategory(customCategoryArgs: $customCategoryArgs) {
    id
    label
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;customCategoryArgs&quot;: {
    &quot;label&quot;: &quot;XYZ&quot;,
    &quot;userId&quot;: ${UserID}
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetCustomCategory" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
    &quot;userId&quot;: ${UserID}
  },&quot;query&quot;:&quot;query GetCustomCategory($userId: Int!) {\n  getCustomCategory(userId: $userId) {\n    id\n    label\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetCustomCategory($userId: Int!) {
  getCustomCategory(userId: $userId) {
    id
    label
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">  {
    &quot;userId&quot;: ${UserID}
  }</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetGalleryContents" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getContentsArgs&quot;: {
    &quot;activityId&quot;: 27,
    &quot;contentType&quot;: &quot;Text&quot;,
    &quot;userId&quot;: ${UserID}
  }
},&quot;query&quot;:&quot;query GetGalleryContents($getContentsArgs: GetContentsArgs) {\n  getGalleryContents(getContentsArgs: $getContentsArgs) {\n    pageInfo {\n      totalCount\n    }\n    data {\n      activityCount\n      contentData\n      contentType\n      description\n      id\n      commentCount\n      likeCount\n      createdAt\n      updatedAt\n      visibility\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetGalleryContents($getContentsArgs: GetContentsArgs) {
  getGalleryContents(getContentsArgs: $getContentsArgs) {
    pageInfo {
      totalCount
    }
    data {
      activityCount
      contentData
      contentType
      description
      id
      commentCount
      likeCount
      createdAt
      updatedAt
      visibility
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getContentsArgs&quot;: {
    &quot;activityId&quot;: 27,
    &quot;contentType&quot;: &quot;Text&quot;,
    &quot;userId&quot;: ${UserID}
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetGroupedContentReactionsById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetGroupedContentReactionsById {\n  getGroupedContentReactionsById(contentId: ${ContentID}) {\n    _count\n    reaction\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetGroupedContentReactionsById {
  getGroupedContentReactionsById(contentId: ${ContentID}) {
    _count
    reaction
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetGroupedCommentReactionsById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetGroupedCommentReactionsById{\n  getGroupedCommentReactionsById(commentId: ${CommentID}) {\n    _count\n    reaction\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetGroupedCommentReactionsById{
  getGroupedCommentReactionsById(commentId: ${CommentID}) {
    _count
    reaction
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDiscoverContents" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;searchContentArgs&quot;: {
    &quot;activity&quot;: 27,
    &quot;contentType&quot;: &quot;Text&quot;,
    &quot;searchString&quot;: &quot;QA&quot;,
    &quot;userId&quot;: ${UserID}
  }
},&quot;query&quot;:&quot;query GetDiscoverContents($searchContentArgs: SearchContentArgs) {\n  getDiscoverContents(searchContentArgs: $searchContentArgs) {\n    data {\n      activityCount\n      commentCount\n      contentType\n      description\n      id\n      likeCount\n      userId\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetDiscoverContents($searchContentArgs: SearchContentArgs) {
  getDiscoverContents(searchContentArgs: $searchContentArgs) {
    data {
      activityCount
      commentCount
      contentType
      description
      id
      likeCount
      userId
    }
    pageInfo {
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;searchContentArgs&quot;: {
    &quot;activity&quot;: 27,
    &quot;contentType&quot;: &quot;Text&quot;,
    &quot;searchString&quot;: &quot;QA&quot;,
    &quot;userId&quot;: ${UserID}
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddProfileView" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{ 
   &quot;fromId&quot;: 1863,
  &quot;toUserId&quot;: ${UserID}
},&quot;query&quot;:&quot;mutation AddProfileView($fromId: Int!, $toUserId: Int!) {\n  addProfileView(fromId: $fromId, toUserId: $toUserId) {\n    followerCount\n    connectionStatus {\n      id\n      status\n      userId\n    }\n    fromUserId\n    id\n    toUserId\n    viewDate\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddProfileView($fromId: Int!, $toUserId: Int!) {
  addProfileView(fromId: $fromId, toUserId: $toUserId) {
    followerCount
    connectionStatus {
      id
      status
      userId
    }
    fromUserId
    id
    toUserId
    viewDate
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{ 
   &quot;fromId&quot;: 1863,
  &quot;toUserId&quot;: ${UserID}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjUyMCwicGVybSI6IiIsImlhdCI6MTY4MjQyNTAyMiwiZXhwIjoxNjg1MDE3MDIyLCJwcm0iOiJhOWM0ZTUyNTRjZWQzMDA5MGFmYTdlYjc4Y2RhMTYxNSIsImppZCI6ImNsNnoxbGE0NTQ3NjYwa3VzbTc4NDQybWhAbG9jYWxob3N0IiwibWltIjoiY2w2ejFsYTQ1NDc2NjBrdXNtNzg0NDJtaCIsInVrZXkiOiIwYzY4ODYyYy0xMDIxLTRmOTctYjA2Yi04MGQ5YTk2NWFmM2MiLCJjbGllbnQiOiIiLCJqdGkiOiI2YzA4M2NkNC1lZjE0LTRjYjUtOGUzNC05ZWJlMWRlYzEwZGEifQ.ENLWZ7w0kyFoqdUywJllhQBVW35cvlHLM9y52cdzVeFd1vQqhdCs8sHHspycR5_9sh3_YP7NZLliO0CQJFL7p_Gwlqk3CUL0pksgue2UsCrWYA5GwD2Pv33PR8aERQqD7JLmVWL5nvQ6rPxRJXmLw5huo0NDye0gGukJ_YI9wyPKlj-p9CFPyCaIkb7uNjfXPHz0jSoL623cmq-gtjO926dDL0SL7tLpu0PMRAtMQPlaiOpaZ10imHPa2FuK-s4HaC5VpDbSXyzeTyyBqpv1e7yYoyCOEZYHkQcpL7p8E7AaALt6RWOCHLvwZH6ltzUbRkspQ2FQkAo3fjsLv0llrw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetProfileViews" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: ${UserID}
},&quot;query&quot;:&quot;query GetProfileViews($userId: Int!) {\n  getProfileViews(userId: $userId) {\n    pageEdges {\n      node {\n        fromUserId\n        followerCount\n        fromUser {\n          firstname\n          lastname\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetProfileViews($userId: Int!) {
  getProfileViews(userId: $userId) {
    pageEdges {
      node {
        fromUserId
        followerCount
        fromUser {
          firstname
          lastname
        }
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: ${UserID}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddBookmark" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: ${UserID}
},&quot;query&quot;:&quot;mutation AddBookmark{\n  addBookmark(contentId: ${ContentID}, userId: ${UserID})\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddBookmark{
  addBookmark(contentId: ${ContentID}, userId: ${UserID})
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: ${UserID}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getBookmarkStatus" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: ${UserID}
},&quot;query&quot;:&quot;query Query{\n  getBookmarkStatus(contentId: ${ContentID}, userId: ${UserID})\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query Query{
  getBookmarkStatus(contentId: ${ContentID}, userId: ${UserID})
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: ${UserID}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="BlockUser" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userAction&quot;: {
    &quot;blockedUserId&quot;: 1996,
    &quot;userId&quot;: ${UserID},
    &quot;type&quot;: &quot;Block&quot;
  }
},&quot;query&quot;:&quot;mutation BlockUser($userAction: UserReportBlock) {\n  blockUser(userAction: $userAction) {\n    blockedUser {\n      connectionStatus {\n        id\n        status\n        userId\n      }\n      id\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation BlockUser($userAction: UserReportBlock) {
  blockUser(userAction: $userAction) {
    blockedUser {
      connectionStatus {
        id
        status
        userId
      }
      id
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userAction&quot;: {
    &quot;blockedUserId&quot;: 1996,
    &quot;userId&quot;: ${UserID},
    &quot;type&quot;: &quot;Block&quot;
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjc0NjQ1MjM2LCJleHAiOjE2NzcyMzcyMzYsInBybSI6IjM1ZmMyY2EzZTdlZTEzNTk2MjUwZjdhZGYwMTExNzQ5IiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjZiYWY1OTJjLTJiZmEtNGQ5YS1hOTc2LTlmYzBhYjZmNGI4NyJ9.lyGnJ89qzpKaVbsHa0rz8U4unwDUN--SerU9erZQfUGNSlhEqnDVzrg5U5Mw3XPho6HGVFv_RX3pfixNT_OXQvVz7sQfBXyjKRz51FrQ8knOiF4Rupn8p1ckzq3RIY5K0RP1eMvcsONrwdRYaj8HyYCEvtxEAOKoXmHBwlv0D9WUEIxozaC_PmVxJeoR_qH8VRZqE5RgH6TI_eYWUimrn-LNItaMHM9PNBajiZwiqAGMwi7TWLElJNUyPK25j2WvrT1AHSV4uYy0HuKBZlsYb-EMayOnT3BsKr5jUq4RS4slDm9o8zVS8DtqJ2i93g6UUAiPK6IGL1MxFhqGNX-MQQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CheckIfBlocked" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query CheckIfBlocked{\n  checkIfBlocked(userId: ${UserID}, blockedUserId: 1970) {\n    message\n    status\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query CheckIfBlocked{
  checkIfBlocked(userId: ${UserID}, blockedUserId: 1970) {
    message
    status
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetBlockedUsers" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;query GetBlockedUsers{\n  getBlockedUsers(userId: ${UserID}, searchString: \&quot;test\&quot;) {\n    pageEdges {\n      node {\n        firstname\n        lastname\n        id\n        username\n        email\n      }\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetBlockedUsers{
  getBlockedUsers(userId: ${UserID}, searchString: &quot;test&quot;) {
    pageEdges {
      node {
        firstname
        lastname
        id
        username
        email
      }
    }
    pageInfo {
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetFollowingUsers" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userNetWorkInput&quot;: {
    &quot;userId&quot;: ${UserID}
  }
},&quot;query&quot;:&quot;query GetFollowingUsers($userNetWorkInput: UserNetWorkInput!) {\n  getFollowingUsers(userNetWorkInput: $userNetWorkInput) {\n    data {\n      id\n      isFollowing\n      followerCount\n      firstname\n      lastname\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.qa.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetFollowingUsers($userNetWorkInput: UserNetWorkInput!) {
  getFollowingUsers(userNetWorkInput: $userNetWorkInput) {
    data {
      id
      isFollowing
      followerCount
      firstname
      lastname
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userNetWorkInput&quot;: {
    &quot;userId&quot;: ${UserID}
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjE2MjMsInBlcm0iOiIiLCJpYXQiOjE2ODUwMTgyNjcsImV4cCI6MTY4NzYxMDI2NywicHJtIjoiMTZhYjY1ODYwNDhhZDExNDFhMWUwMTljNmZmMDNkYmMiLCJqaWQiOiJjbGdvcnhmd3IwMDA2eGYwbHZvYjY2dzYxQGxvY2FsaG9zdCIsIm1pbSI6ImNsZ29yeGZ3cjAwMDZ4ZjBsdm9iNjZ3NjEiLCJ1a2V5IjoiMWM2NzM4OTEtZDQ0Yi00NzNkLTlhZDEtZmNlNzM3MWE3ZmIzIiwiY2xpZW50IjoiIiwianRpIjoiNDI0OGNhN2QtMmFiNC00ZTAwLWJiZDQtNzg4YmE1MGIyM2RiIn0.mosdBAAqK6vuHvdS1OqRR1nE7fgGiQevLJzFSUCqFp9qsika6aNkIf3qgbGBbI0nFkAj71-gVe_ifDMBHdZbEk0YK9k9pa2Qbtj7nL63nWFiLDUdzvoxLEX9-HvQ6KgBbM4N8zxeTXlDmhk3u4uMNWpCR3h-x6QVKxfyZtrpg36h0y7GgA0ad_b8RIEzQJSRrtC8j-bL1yQVytQrHqMEZ7A_9Lr3yuW3rl-ifKHGy-huGlg9HSCQhQeeWiUZ4t0kLbwXhFo9JSQ51xzhhCr5HkBkAbSsN8L1iOxp7JRaxbrZ8uhEjy2nhj2LZ9aIlugoFmALpyRNjMLn3tvlNT01rQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\Results\R1.5_GetFollowingUsers_50Users_15Mins.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\NXLVL\NXLVL_CoreAPIs\Results\R1.5_GetFollowingUsers_50Users_15Mins.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">12296/17071</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
