<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="false">
        <stringProp name="filename">Comment_ID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">comment_id</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="false">
        <stringProp name="filename">D:\Post_Service\CSV_DATA\Content_ID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">content_id,userId</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="false">
        <stringProp name="filename">DraftContent_ID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">DraftContent_id,userId</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="true">
        <stringProp name="filename">User_Stress - User_updated.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">id,username,email</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="false">
        <stringProp name="filename">SearchEvent_UserID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">userId</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Post_Service" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">375</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">910</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetFeedContents" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getFeedContentsId&quot;: ${id},
  &quot;pageNo&quot;: 0,
  &quot;take&quot;: 10
},&quot;query&quot;:&quot;query GetFeedContents($take: Int, $pageNo: Int, $getFeedContentsId: Int!) {\n  getFeedContents(take: $take, pageNo: $pageNo, id: $getFeedContentsId) {\n    data {\n      id\n      imageURL\n      contentWidth\n      contentHeight\n      isFollowing\n      user {\n        id\n        profileImage\n        email\n        firstname\n        lastname\n        username\n      }\n      taggedUsers {\n        id\n        username\n        lastname\n        username\n        profileImage\n      }\n      repostParentId\n      repostDescription\n      parentPost {\n        location\n        id\n        user {\n          id\n          firstname\n          lastname\n          username\n        }\n        description\n        taggedUsers {\n          id\n          username\n          firstname\n          lastname\n          profileImage\n        }\n        visibility\n        isDeleted\n        taggedContentUser {\n          id\n          firstname\n          lastname\n        }\n        taggedContentBy\n        taggedUsersCount\n      }\n      contentData\n      contentThumbnail\n      eventData {\n        eventName\n        eventType\n        eventStartDate\n        eventEndDate\n        eventLink\n        invites\n      }\n      description\n      createdAt\n      contentType\n      allowComments\n      allowSharing\n      isPinned\n      allowRepost\n      commentCount\n      likeCount\n      reaction\n      visibility\n      location\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n      hasShowMore\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetFeedContents($take: Int, $pageNo: Int, $getFeedContentsId: Int!) {
  getFeedContents(take: $take, pageNo: $pageNo, id: $getFeedContentsId) {
    data {
      id
      imageURL
      contentWidth
      contentHeight
      isFollowing
      user {
        id
        profileImage
        email
        firstname
        lastname
        username
      }
      taggedUsers {
        id
        username
        lastname
        username
        profileImage
      }
      repostParentId
      repostDescription
      parentPost {
        location
        id
        user {
          id
          firstname
          lastname
          username
        }
        description
        taggedUsers {
          id
          username
          firstname
          lastname
          profileImage
        }
        visibility
        isDeleted
        taggedContentUser {
          id
          firstname
          lastname
        }
        taggedContentBy
        taggedUsersCount
      }
      contentData
      contentThumbnail
      eventData {
        eventName
        eventType
        eventStartDate
        eventEndDate
        eventLink
        invites
      }
      description
      createdAt
      contentType
      allowComments
      allowSharing
      isPinned
      allowRepost
      commentCount
      likeCount
      reaction
      visibility
      location
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
      hasShowMore
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getFeedContentsId&quot;: ${id},
  &quot;pageNo&quot;: 0,
  &quot;take&quot;: 10
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetGalleryContents" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getContentsArgs&quot;: {
    &quot;userId&quot;: ${id},
    &quot;cursor&quot;: 0,
    &quot;take&quot;: 10
  }
},&quot;query&quot;:&quot;query GetGalleryContents($getContentsArgs: GetContentsArgs) {\n  getGalleryContents(getContentsArgs: $getContentsArgs) {\n    data {\n      id\n      imageURL\n      contentWidth\n      contentHeight\n      isFollowing\n      user {\n        id\n        profileImage\n        email\n        firstname\n        lastname\n        username\n      }\n      taggedUsers {\n        id\n        username\n        lastname\n        username\n        profileImage\n      }\n      repostParentId\n      repostDescription\n      parentPost {\n        location\n        id\n        user {\n          id\n          firstname\n          lastname\n          username\n        }\n        description\n        taggedUsers {\n          id\n          username\n          firstname\n          lastname\n          profileImage\n        }\n        visibility\n        isDeleted\n        taggedContentUser {\n          id\n          firstname\n          lastname\n        }\n        taggedContentBy\n        taggedUsersCount\n      }\n      contentData\n      contentThumbnail\n      eventData {\n        eventName\n        eventType\n        eventStartDate\n        eventEndDate\n        eventLink\n        invites\n      }\n      description\n      createdAt\n      contentType\n      allowComments\n      allowSharing\n      isPinned\n      isPublished\n      allowRepost\n      commentCount\n      likeCount\n      reaction\n      visibility\n      location\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n      hasShowMore\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetGalleryContents($getContentsArgs: GetContentsArgs) {
  getGalleryContents(getContentsArgs: $getContentsArgs) {
    data {
      id
      imageURL
      contentWidth
      contentHeight
      isFollowing
      user {
        id
        profileImage
        email
        firstname
        lastname
        username
      }
      taggedUsers {
        id
        username
        lastname
        username
        profileImage
      }
      repostParentId
      repostDescription
      parentPost {
        location
        id
        user {
          id
          firstname
          lastname
          username
        }
        description
        taggedUsers {
          id
          username
          firstname
          lastname
          profileImage
        }
        visibility
        isDeleted
        taggedContentUser {
          id
          firstname
          lastname
        }
        taggedContentBy
        taggedUsersCount
      }
      contentData
      contentThumbnail
      eventData {
        eventName
        eventType
        eventStartDate
        eventEndDate
        eventLink
        invites
      }
      description
      createdAt
      contentType
      allowComments
      allowSharing
      isPinned
      isPublished
      allowRepost
      commentCount
      likeCount
      reaction
      visibility
      location
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
      hasShowMore
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getContentsArgs&quot;: {
    &quot;userId&quot;: ${id},
    &quot;cursor&quot;: 0,
    &quot;take&quot;: 10
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDiscoverContents" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;searchContentArgs&quot;: {
    &quot;userId&quot;: ${id},
    &quot;take&quot;: 10,
    &quot;pageNo&quot;: 0
  }
},&quot;query&quot;:&quot;query GetDiscoverContents($searchContentArgs: SearchContentArgs) {\n  getDiscoverContents(searchContentArgs: $searchContentArgs) {\n    data {\n      id\n      imageURL\n      contentWidth\n      contentHeight\n      isFollowing\n      user {\n        id\n        profileImage\n        email\n        firstname\n        lastname\n        username\n      }\n      taggedUsers {\n        id\n        username\n        lastname\n        username\n        profileImage\n      }\n      repostParentId\n      repostDescription\n      parentPost {\n        location\n        id\n        user {\n          id\n          firstname\n          lastname\n          username\n        }\n        description\n        taggedUsers {\n          id\n          username\n          firstname\n          lastname\n          profileImage\n        }\n        visibility\n        isDeleted\n        taggedContentUser {\n          id\n          firstname\n          lastname\n        }\n        taggedContentBy\n        taggedUsersCount\n      }\n      contentData\n      contentThumbnail\n      eventData {\n        eventName\n        eventType\n        eventStartDate\n        eventEndDate\n        eventLink\n        invites\n      }\n      isCommitment\n      isPrimary\n      description\n      createdAt\n      contentType\n      contentThumbnail\n      allowComments\n      allowSharing\n      isPinned\n      allowRepost\n      commentCount\n      likeCount\n      reaction\n      userId\n      visibility\n      location\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n      hasShowMore\n      rsvp\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetDiscoverContents($searchContentArgs: SearchContentArgs) {
  getDiscoverContents(searchContentArgs: $searchContentArgs) {
    data {
      id
      imageURL
      contentWidth
      contentHeight
      isFollowing
      user {
        id
        profileImage
        email
        firstname
        lastname
        username
      }
      taggedUsers {
        id
        username
        lastname
        username
        profileImage
      }
      repostParentId
      repostDescription
      parentPost {
        location
        id
        user {
          id
          firstname
          lastname
          username
        }
        description
        taggedUsers {
          id
          username
          firstname
          lastname
          profileImage
        }
        visibility
        isDeleted
        taggedContentUser {
          id
          firstname
          lastname
        }
        taggedContentBy
        taggedUsersCount
      }
      contentData
      contentThumbnail
      eventData {
        eventName
        eventType
        eventStartDate
        eventEndDate
        eventLink
        invites
      }
      isCommitment
      isPrimary
      description
      createdAt
      contentType
      contentThumbnail
      allowComments
      allowSharing
      isPinned
      allowRepost
      commentCount
      likeCount
      reaction
      userId
      visibility
      location
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
      hasShowMore
      rsvp
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;searchContentArgs&quot;: {
    &quot;userId&quot;: ${id},
    &quot;take&quot;: 10,
    &quot;pageNo&quot;: 0
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchEvents" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;searchEventsArgs&quot;: {
    &quot;userId&quot;: ${userId},
    &quot;take&quot;: 10,
    &quot;pageNo&quot;: 0,
    &quot;filter&quot;: &quot;PastEvents&quot;
  }
},&quot;query&quot;:&quot;query SearchEvents($searchEventsArgs: SearchEventArgs) {\n  searchEvents(searchEventsArgs: $searchEventsArgs) {\n    pageEdges {\n      node {\n        activity {\n          id\n          name\n        }\n        allowComments\n        allowRepost\n        contentThumbnail\n        contentType\n        createdAt\n        description\n        eventData\n        id\n        imageURL\n        location\n        visibility\n        userId\n        repostParentId\n        rsvp\n      }\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query SearchEvents($searchEventsArgs: SearchEventArgs) {
  searchEvents(searchEventsArgs: $searchEventsArgs) {
    pageEdges {
      node {
        activity {
          id
          name
        }
        allowComments
        allowRepost
        contentThumbnail
        contentType
        createdAt
        description
        eventData
        id
        imageURL
        location
        visibility
        userId
        repostParentId
        rsvp
      }
    }
    pageInfo {
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;searchEventsArgs&quot;: {
    &quot;userId&quot;: ${userId},
    &quot;take&quot;: 10,
    &quot;pageNo&quot;: 0,
    &quot;filter&quot;: &quot;PastEvents&quot;
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getContentById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;id&quot;: ${content_id}
},&quot;query&quot;:&quot;query getContentById($id: Int!) {\n  getContentById(id: $id) {\n    id\n    imageURL\n    contentWidth\n    contentHeight\n    isFollowing\n    user {\n      id\n      profileImage\n      email\n      firstname\n      lastname\n      username\n      userCommitment {\n        id\n      }\n      userPrimaryVideo {\n        id\n      }\n    }\n    isPrimary\n    isCommitment\n    taggedUsers {\n      id\n      username\n      lastname\n      username\n      profileImage\n    }\n    repostParentId\n    repostDescription\n    parentPost {\n      location\n      id\n      user {\n        id\n        firstname\n        lastname\n        username\n      }\n      description\n      taggedUsers {\n        id\n        username\n        firstname\n        lastname\n        profileImage\n      }\n      visibility\n      isDeleted\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n    }\n    contentData\n    eventData {\n      eventName\n      eventType\n      eventStartDate\n      eventEndDate\n      eventLink\n      invites\n    }\n    description\n    createdAt\n    contentType\n    allowComments\n    allowSharing\n    isPinned\n    allowRepost\n    commentCount\n    likeCount\n    viewCount\n    reaction\n    visibility\n    location\n    taggedContentUser {\n      id\n      firstname\n      lastname\n    }\n    taggedContentBy\n    taggedUsersCount\n    hasShowMore\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getContentById($id: Int!) {
  getContentById(id: $id) {
    id
    imageURL
    contentWidth
    contentHeight
    isFollowing
    user {
      id
      profileImage
      email
      firstname
      lastname
      username
      userCommitment {
        id
      }
      userPrimaryVideo {
        id
      }
    }
    isPrimary
    isCommitment
    taggedUsers {
      id
      username
      lastname
      username
      profileImage
    }
    repostParentId
    repostDescription
    parentPost {
      location
      id
      user {
        id
        firstname
        lastname
        username
      }
      description
      taggedUsers {
        id
        username
        firstname
        lastname
        profileImage
      }
      visibility
      isDeleted
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
    }
    contentData
    eventData {
      eventName
      eventType
      eventStartDate
      eventEndDate
      eventLink
      invites
    }
    description
    createdAt
    contentType
    allowComments
    allowSharing
    isPinned
    allowRepost
    commentCount
    likeCount
    viewCount
    reaction
    visibility
    location
    taggedContentUser {
      id
      firstname
      lastname
    }
    taggedContentBy
    taggedUsersCount
    hasShowMore
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;id&quot;: ${content_id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getContentDraftById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;id&quot;: ${DraftContent_id}
},&quot;query&quot;:&quot;query getContentDraftById($id: Int!) {\n  getContentDraftById(id: $id) {\n    id\n    imageURL\n    userId\n    updatedAt\n    createdAt\n    dateOfEvent\n    contentData\n    description\n    contentType\n    visibility\n    publishToFeed\n    isPublished\n    allowComments\n    allowSharing\n    allowRepost\n    displayTags\n    contentWidth\n    contentHeight\n    taggedContentUser {\n      id\n      firstname\n      lastname\n    }\n    taggedContentBy\n    taggedUsersCount\n    location\n    user {\n      id\n      profileImage\n      email\n      provider\n      firstname\n      lastname\n      username\n    }\n    taggedUsers {\n      id\n      username\n      firstname\n      lastname\n      profileImage\n    }\n    activitiesOnContentDrafts {\n      activityId\n      activity {\n        id\n        name\n      }\n    }\n    attributesOnContentDrafts {\n      attribute {\n        id\n        name\n        isActivity\n        isShared\n        displayName\n        listName\n        measureData {\n          activityLabel\n          buttonLabel\n          dbUnit\n          defaultUnit\n          list\n          mask {\n            displayFormat\n            label\n            pickers\n          }\n          max\n          min\n          picker\n          start\n          type\n          seasonLabel\n          unitChange\n        }\n      }\n    }\n    attributeValues {\n      dbUnit\n      name\n      type\n      userUnit\n      userValue\n      value\n      id\n      displayValue\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getContentDraftById($id: Int!) {
  getContentDraftById(id: $id) {
    id
    imageURL
    userId
    updatedAt
    createdAt
    dateOfEvent
    contentData
    description
    contentType
    visibility
    publishToFeed
    isPublished
    allowComments
    allowSharing
    allowRepost
    displayTags
    contentWidth
    contentHeight
    taggedContentUser {
      id
      firstname
      lastname
    }
    taggedContentBy
    taggedUsersCount
    location
    user {
      id
      profileImage
      email
      provider
      firstname
      lastname
      username
    }
    taggedUsers {
      id
      username
      firstname
      lastname
      profileImage
    }
    activitiesOnContentDrafts {
      activityId
      activity {
        id
        name
      }
    }
    attributesOnContentDrafts {
      attribute {
        id
        name
        isActivity
        isShared
        displayName
        listName
        measureData {
          activityLabel
          buttonLabel
          dbUnit
          defaultUnit
          list
          mask {
            displayFormat
            label
            pickers
          }
          max
          min
          picker
          start
          type
          seasonLabel
          unitChange
        }
      }
    }
    attributeValues {
      dbUnit
      name
      type
      userUnit
      userValue
      value
      id
      displayValue
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;id&quot;: ${DraftContent_id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getCommentsByContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;take&quot;: 10,
  &quot;cursor&quot;: 0,
  &quot;contentId&quot;: ${content_id}
},&quot;query&quot;:&quot;query getCommentsByContent($take: Int, $cursor: Int, $contentId: Int!) {\n  getCommentsByContent(take: $take, cursor: $cursor, contentId: $contentId) {\n    pageEdges {\n      node {\n        id\n        commentText\n        reaction\n        likeCount\n        isFlagged\n        imageDataUri\n        _count\n        commentedBy\n        taggedUserIds\n        taggedUsers {\n          username\n          firstname\n          profileImage\n          lastname\n          id\n        }\n        createdAt\n        commenter {\n          id\n          firstname\n          lastname\n          profileImage\n          username\n        }\n        isEdited\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n    totalCommentCount\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getCommentsByContent($take: Int, $cursor: Int, $contentId: Int!) {
  getCommentsByContent(take: $take, cursor: $cursor, contentId: $contentId) {
    pageEdges {
      node {
        id
        commentText
        reaction
        likeCount
        isFlagged
        imageDataUri
        _count
        commentedBy
        taggedUserIds
        taggedUsers {
          username
          firstname
          profileImage
          lastname
          id
        }
        createdAt
        commenter {
          id
          firstname
          lastname
          profileImage
          username
        }
        isEdited
      }
    }
    pageInfo {
      hasNextPage
      totalCount
    }
    totalCommentCount
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;take&quot;: 10,
  &quot;cursor&quot;: 0,
  &quot;contentId&quot;: ${content_id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODkwNjc1MjcsImV4cCI6MTY5MTY1OTUyNywicHJtIjoiYTdmNjg0Y2ZhNjI0N2Y5NmZhZTA5ZDE2OTc0Y2IzNWUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIzNzU1NWQ5ZS1lY2M5LTQyY2EtYTYwNi0yZjUwM2UyNDQyNGIifQ.H9EmzmSJR4XEIHSZXUZM2AwxGnweOOm8ldIvmW6kE0RqO8DnrRl1minzUU1WnVn2kO7QMw1NG444Y9drC4vqC1xH9ikLC6IU-emIpNFZvIJYdDcyajbteknAmZo8m2p6RlvWWc046rdh54STTe3oM8915In_X6QCefeRq84vht3d9ddtB3O9BTVou4dZQUGpyZLUxbYKr5yINbmYIzS7MYW8-FdjmypACxKAQdtrsjMSaCaffygGqHdJpo0ECFqapqmTV_Iv0OoZKkv1kH5KY060gOIAdUmG1mPYUjW-225mXRh8XDELOScAqgFYk7lYrdV05RwQIbWouwAftujrkw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getStaticFeedAIML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getStaticFeedAimlId&quot;: ${id}
},&quot;query&quot;:&quot;query Query($getStaticFeedAimlId: Int!) {\n  getStaticFeedAIML(id: $getStaticFeedAimlId)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query Query($getStaticFeedAimlId: Int!) {
  getStaticFeedAIML(id: $getStaticFeedAimlId)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getStaticFeedAimlId&quot;: ${id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserStaticFeedAIML" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getUserStaticFeedAimlId&quot;: ${id}
},&quot;query&quot;:&quot;query Query($getUserStaticFeedAimlId: Int!) {\n  getUserStaticFeedAIML(id: $getUserStaticFeedAimlId)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query Query($getUserStaticFeedAimlId: Int!) {
  getUserStaticFeedAIML(id: $getUserStaticFeedAimlId)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getUserStaticFeedAimlId&quot;: ${id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getLikesByContent" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;take&quot;: 10,
  &quot;cursor&quot;: 0,
  &quot;contentId&quot;: ${content_id}
},&quot;query&quot;:&quot;query getLikesByContent(\n  $take: Int\n  $cursor: Int\n  $contentId: Int!\n) {\n  getLikesByContent(take: $take, cursor: $cursor, contentId: $contentId) {\n    pageEdges {\n      node {\n        id\n        contentId\n        reaction\n        liker {\n          firstname\n          lastname\n          profileImage\n          id\n          xmppUsername\n        }\n        likedBy\n      }\n    }\n    pageInfo {\n      totalCount\n      hasNextPage\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getLikesByContent(
  $take: Int
  $cursor: Int
  $contentId: Int!
) {
  getLikesByContent(take: $take, cursor: $cursor, contentId: $contentId) {
    pageEdges {
      node {
        id
        contentId
        reaction
        liker {
          firstname
          lastname
          profileImage
          id
          xmppUsername
        }
        likedBy
      }
    }
    pageInfo {
      totalCount
      hasNextPage
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;take&quot;: 10,
  &quot;cursor&quot;: 0,
  &quot;contentId&quot;: ${content_id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODkwNjc1MjcsImV4cCI6MTY5MTY1OTUyNywicHJtIjoiYTdmNjg0Y2ZhNjI0N2Y5NmZhZTA5ZDE2OTc0Y2IzNWUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIzNzU1NWQ5ZS1lY2M5LTQyY2EtYTYwNi0yZjUwM2UyNDQyNGIifQ.H9EmzmSJR4XEIHSZXUZM2AwxGnweOOm8ldIvmW6kE0RqO8DnrRl1minzUU1WnVn2kO7QMw1NG444Y9drC4vqC1xH9ikLC6IU-emIpNFZvIJYdDcyajbteknAmZo8m2p6RlvWWc046rdh54STTe3oM8915In_X6QCefeRq84vht3d9ddtB3O9BTVou4dZQUGpyZLUxbYKr5yINbmYIzS7MYW8-FdjmypACxKAQdtrsjMSaCaffygGqHdJpo0ECFqapqmTV_Iv0OoZKkv1kH5KY060gOIAdUmG1mPYUjW-225mXRh8XDELOScAqgFYk7lYrdV05RwQIbWouwAftujrkw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getGroupedContentReactionsById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;contentId&quot;: ${content_id}
},&quot;query&quot;:&quot;query getGroupedContentReactionsById($contentId: Int!) {\n  getGroupedContentReactionsById(contentId: $contentId) {\n    _count\n    reaction\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getGroupedContentReactionsById($contentId: Int!) {
  getGroupedContentReactionsById(contentId: $contentId) {
    _count
    reaction
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;contentId&quot;: ${content_id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getCommentLikesById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;take&quot;: 10,
  &quot;cursor&quot;: 0,
  &quot;commentId&quot;: ${comment_id}
},&quot;query&quot;:&quot;query getCommentLikesById(\n  $take: Int\n  $cursor: Int\n  $commentId: Int!\n) {\n  getCommentLikesById(take: $take, cursor: $cursor, commentId: $commentId) {\n    pageEdges {\n      node {\n        id\n        commentId\n        reaction\n        liker {\n          firstname\n          lastname\n          profileImage\n          id\n          xmppUsername\n        }\n        likedBy\n      }\n    }\n    pageInfo {\n      totalCount\n      hasNextPage\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getCommentLikesById(
  $take: Int
  $cursor: Int
  $commentId: Int!
) {
  getCommentLikesById(take: $take, cursor: $cursor, commentId: $commentId) {
    pageEdges {
      node {
        id
        commentId
        reaction
        liker {
          firstname
          lastname
          profileImage
          id
          xmppUsername
        }
        likedBy
      }
    }
    pageInfo {
      totalCount
      hasNextPage
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;take&quot;: 10,
  &quot;cursor&quot;: 0,
  &quot;commentId&quot;: ${comment_id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODkwNjc1MjcsImV4cCI6MTY5MTY1OTUyNywicHJtIjoiYTdmNjg0Y2ZhNjI0N2Y5NmZhZTA5ZDE2OTc0Y2IzNWUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIzNzU1NWQ5ZS1lY2M5LTQyY2EtYTYwNi0yZjUwM2UyNDQyNGIifQ.H9EmzmSJR4XEIHSZXUZM2AwxGnweOOm8ldIvmW6kE0RqO8DnrRl1minzUU1WnVn2kO7QMw1NG444Y9drC4vqC1xH9ikLC6IU-emIpNFZvIJYdDcyajbteknAmZo8m2p6RlvWWc046rdh54STTe3oM8915In_X6QCefeRq84vht3d9ddtB3O9BTVou4dZQUGpyZLUxbYKr5yINbmYIzS7MYW8-FdjmypACxKAQdtrsjMSaCaffygGqHdJpo0ECFqapqmTV_Iv0OoZKkv1kH5KY060gOIAdUmG1mPYUjW-225mXRh8XDELOScAqgFYk7lYrdV05RwQIbWouwAftujrkw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getGroupedCommentReactionsById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;commentId&quot;: ${comment_id}
},&quot;query&quot;:&quot;query getGroupedCommentReactionsById($commentId: Int!) {\n  getGroupedCommentReactionsById(commentId: $commentId) {\n    _count\n    reaction\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getGroupedCommentReactionsById($commentId: Int!) {
  getGroupedCommentReactionsById(commentId: $commentId) {
    _count
    reaction
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;commentId&quot;: ${comment_id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODkwNjc1MjcsImV4cCI6MTY5MTY1OTUyNywicHJtIjoiYTdmNjg0Y2ZhNjI0N2Y5NmZhZTA5ZDE2OTc0Y2IzNWUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIzNzU1NWQ5ZS1lY2M5LTQyY2EtYTYwNi0yZjUwM2UyNDQyNGIifQ.H9EmzmSJR4XEIHSZXUZM2AwxGnweOOm8ldIvmW6kE0RqO8DnrRl1minzUU1WnVn2kO7QMw1NG444Y9drC4vqC1xH9ikLC6IU-emIpNFZvIJYdDcyajbteknAmZo8m2p6RlvWWc046rdh54STTe3oM8915In_X6QCefeRq84vht3d9ddtB3O9BTVou4dZQUGpyZLUxbYKr5yINbmYIzS7MYW8-FdjmypACxKAQdtrsjMSaCaffygGqHdJpo0ECFqapqmTV_Iv0OoZKkv1kH5KY060gOIAdUmG1mPYUjW-225mXRh8XDELOScAqgFYk7lYrdV05RwQIbWouwAftujrkw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
