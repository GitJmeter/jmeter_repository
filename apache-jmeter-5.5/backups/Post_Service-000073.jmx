<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">User_Stress - User_updated.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">id,email</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Post_Service" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">20</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">940</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDiscoverContents" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;searchContentArgs&quot;: {
    &quot;userId&quot;: ${id},
    &quot;take&quot;: 10,
    &quot;pageNo&quot;: 0
  }
},&quot;query&quot;:&quot;query GetDiscoverContents($searchContentArgs: SearchContentArgs) {\n  getDiscoverContents(searchContentArgs: $searchContentArgs) {\n    data {\n      id\n      imageURL\n      contentWidth\n      contentHeight\n      isFollowing\n      user {\n        id\n        profileImage\n        email\n        firstname\n        lastname\n        username\n      }\n      taggedUsers {\n        id\n        username\n        lastname\n        username\n        profileImage\n      }\n      repostParentId\n      repostDescription\n      parentPost {\n        location\n        id\n        user {\n          id\n          firstname\n          lastname\n          username\n        }\n        description\n        taggedUsers {\n          id\n          username\n          firstname\n          lastname\n          profileImage\n        }\n        visibility\n        isDeleted\n        taggedContentUser {\n          id\n          firstname\n          lastname\n        }\n        taggedContentBy\n        taggedUsersCount\n      }\n      contentData\n      contentThumbnail\n      eventData {\n        eventName\n        eventType\n        eventStartDate\n        eventEndDate\n        eventLink\n        invites\n      }\n      isCommitment\n      isPrimary\n      description\n      createdAt\n      contentType\n      contentThumbnail\n      allowComments\n      allowSharing\n      isPinned\n      allowRepost\n      commentCount\n      likeCount\n      reaction\n      userId\n      visibility\n      location\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n      hasShowMore\n      rsvp\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetDiscoverContents($searchContentArgs: SearchContentArgs) {
  getDiscoverContents(searchContentArgs: $searchContentArgs) {
    data {
      id
      imageURL
      contentWidth
      contentHeight
      isFollowing
      user {
        id
        profileImage
        email
        firstname
        lastname
        username
      }
      taggedUsers {
        id
        username
        lastname
        username
        profileImage
      }
      repostParentId
      repostDescription
      parentPost {
        location
        id
        user {
          id
          firstname
          lastname
          username
        }
        description
        taggedUsers {
          id
          username
          firstname
          lastname
          profileImage
        }
        visibility
        isDeleted
        taggedContentUser {
          id
          firstname
          lastname
        }
        taggedContentBy
        taggedUsersCount
      }
      contentData
      contentThumbnail
      eventData {
        eventName
        eventType
        eventStartDate
        eventEndDate
        eventLink
        invites
      }
      isCommitment
      isPrimary
      description
      createdAt
      contentType
      contentThumbnail
      allowComments
      allowSharing
      isPinned
      allowRepost
      commentCount
      likeCount
      reaction
      userId
      visibility
      location
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
      hasShowMore
      rsvp
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;searchContentArgs&quot;: {
    &quot;userId&quot;: ${id},
    &quot;take&quot;: 10,
    &quot;pageNo&quot;: 0
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetGalleryContents" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getContentsArgs&quot;: {
    &quot;userId&quot;: ${id},
    &quot;cursor&quot;: 0,
    &quot;take&quot;: 10
  }
},&quot;query&quot;:&quot;query GetGalleryContents($getContentsArgs: GetContentsArgs) {\n  getGalleryContents(getContentsArgs: $getContentsArgs) {\n    data {\n      id\n      imageURL\n      contentWidth\n      contentHeight\n      isFollowing\n      user {\n        id\n        profileImage\n        email\n        firstname\n        lastname\n        username\n      }\n      taggedUsers {\n        id\n        username\n        lastname\n        username\n        profileImage\n      }\n      repostParentId\n      repostDescription\n      parentPost {\n        location\n        id\n        user {\n          id\n          firstname\n          lastname\n          username\n        }\n        description\n        taggedUsers {\n          id\n          username\n          firstname\n          lastname\n          profileImage\n        }\n        visibility\n        isDeleted\n        taggedContentUser {\n          id\n          firstname\n          lastname\n        }\n        taggedContentBy\n        taggedUsersCount\n      }\n      contentData\n      contentThumbnail\n      eventData {\n        eventName\n        eventType\n        eventStartDate\n        eventEndDate\n        eventLink\n        invites\n      }\n      description\n      createdAt\n      contentType\n      allowComments\n      allowSharing\n      isPinned\n      isPublished\n      allowRepost\n      commentCount\n      likeCount\n      reaction\n      visibility\n      location\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n      hasShowMore\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetGalleryContents($getContentsArgs: GetContentsArgs) {
  getGalleryContents(getContentsArgs: $getContentsArgs) {
    data {
      id
      imageURL
      contentWidth
      contentHeight
      isFollowing
      user {
        id
        profileImage
        email
        firstname
        lastname
        username
      }
      taggedUsers {
        id
        username
        lastname
        username
        profileImage
      }
      repostParentId
      repostDescription
      parentPost {
        location
        id
        user {
          id
          firstname
          lastname
          username
        }
        description
        taggedUsers {
          id
          username
          firstname
          lastname
          profileImage
        }
        visibility
        isDeleted
        taggedContentUser {
          id
          firstname
          lastname
        }
        taggedContentBy
        taggedUsersCount
      }
      contentData
      contentThumbnail
      eventData {
        eventName
        eventType
        eventStartDate
        eventEndDate
        eventLink
        invites
      }
      description
      createdAt
      contentType
      allowComments
      allowSharing
      isPinned
      isPublished
      allowRepost
      commentCount
      likeCount
      reaction
      visibility
      location
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
      hasShowMore
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getContentsArgs&quot;: {
    &quot;userId&quot;: ${id},
    &quot;cursor&quot;: 0,
    &quot;take&quot;: 10
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\pravin.parakhe\Documents\R1.7_GetGalleryContents_with_3000Users_24Aug.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
