<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">C:/Users/pravin.parakhe/Documents/GetUserClubWithSubscription_100Records.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">id,username</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">C:/Users/pravin.parakhe/Documents/nftEditionId.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">nftEditionId</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">C:/Users/pravin.parakhe/Documents/nxConnect_Data.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">id1,username1,email</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">C:/Users/pravin.parakhe/Documents/Like_Comment_ID.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">Like_CAdd</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetClubDetailsWithFAQ" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username}&quot;
},&quot;query&quot;:&quot;query GetClubWithFaq($username: String) {\n  getClubWithFaq(username: $username) {\n        id\n        username\n        email\n        userId\n        title\n        content\n        mediaData\n        freeTierBenefits\n        memberBenefits\n        nftData\n        createdAt\n        updatedAt\n        isActive\n\t       subPageIds\n\t       faq{que,ans}\n      }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetClubWithFaq($username: String) {
  getClubWithFaq(username: $username) {
        id
        username
        email
        userId
        title
        content
        mediaData
        freeTierBenefits
        memberBenefits
        nftData
        createdAt
        updatedAt
        isActive
	       subPageIds
	       faq{que,ans}
      }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODgwNDcyMDQsImV4cCI6MTY5MDYzOTIwNCwicHJtIjoiNDJjMjNiMGVjODEzYzdlMjE0OGE1NDQ5ZTJiMWJjNjYiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI1MmRlNTFmNy04ZWQ5LTQwM2YtOGRkMi1iMGJjMmRlZTE4YzkifQ.HGPvHG9mR0Gl_GFkMFhYbJ8IX2fZmlu-Ire5EwS_UpVVcP0vNSLRgGYt_1kY8PP6zv7013S0TO-4LlGGWj4P1bmtzWnYnIIMy6RhFM30J2tyKhEH7BR94IRjdS08o9ZjX8j7OdshDdnIWYzcCVzXsAqpIHMJc5WXl1ysWKmwOadnKr5ZgdQMm5Wf2wGnRMdd2af0lyfJYJBTRCgnltaXCZMBNiT3hW9ua4TTCfDtjNXLeDv9i3resHnZLlmTvI9S8q7bJlaWBc50MH5UiJqmVnhqLBe3T6diMYUYbuhz_Kcn6y7rnlbVHqyC2mQ3KlavzGXlIerjAVBPyvl5_wfhHQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sParse_subPageIds" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">sParse_subPageIds</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;subPageIds&quot;:</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">,&quot;faq&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default">sParse_subPageIds_NF</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetClubDetailsWithSubscriptions" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username}&quot;
},&quot;query&quot;:&quot;query GetClubWithSubscriptions($username: String) {\n  getClubWithSubscriptions(username: $username) {\n        id\n        username\n        email\n        userId\n        title\n        content\n        mediaData\n        freeTierBenefits\n        memberBenefits\n        nftData\n        createdAt\n        updatedAt\n        isActive\n      subscriptions {\n        id\n        clubId\n        type\n        packageType\n        name\n        detail\n        cost\n        period\n        nftData\n        customBenefits\n        expirationDate\n        createdAt\n        updatedAt\n        isActive\n      }\n      subPageIds\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetClubWithSubscriptions($username: String) {
  getClubWithSubscriptions(username: $username) {
        id
        username
        email
        userId
        title
        content
        mediaData
        freeTierBenefits
        memberBenefits
        nftData
        createdAt
        updatedAt
        isActive
      subscriptions {
        id
        clubId
        type
        packageType
        name
        detail
        cost
        period
        nftData
        customBenefits
        expirationDate
        createdAt
        updatedAt
        isActive
      }
      subPageIds
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODgwNDcyMDQsImV4cCI6MTY5MDYzOTIwNCwicHJtIjoiNDJjMjNiMGVjODEzYzdlMjE0OGE1NDQ5ZTJiMWJjNjYiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI1MmRlNTFmNy04ZWQ5LTQwM2YtOGRkMi1iMGJjMmRlZTE4YzkifQ.HGPvHG9mR0Gl_GFkMFhYbJ8IX2fZmlu-Ire5EwS_UpVVcP0vNSLRgGYt_1kY8PP6zv7013S0TO-4LlGGWj4P1bmtzWnYnIIMy6RhFM30J2tyKhEH7BR94IRjdS08o9ZjX8j7OdshDdnIWYzcCVzXsAqpIHMJc5WXl1ysWKmwOadnKr5ZgdQMm5Wf2wGnRMdd2af0lyfJYJBTRCgnltaXCZMBNiT3hW9ua4TTCfDtjNXLeDv9i3resHnZLlmTvI9S8q7bJlaWBc50MH5UiJqmVnhqLBe3T6diMYUYbuhz_Kcn6y7rnlbVHqyC2mQ3KlavzGXlIerjAVBPyvl5_wfhHQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_clubId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_clubId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;clubId&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_clubId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserSubPages" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{

        &quot;subPageIds&quot;: ${sParse_subPageIds}        

},&quot;query&quot;:&quot;query getUserSubPages($subPageIds: [Int!]) {\n\tgetUserSubPages(subPageIds: $subPageIds) {\n\t\tid\n\t\tfirstname\n\t\t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getUserSubPages($subPageIds: [Int!]) {
	getUserSubPages(subPageIds: $subPageIds) {
		id
		firstname
		}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{

        &quot;subPageIds&quot;: ${sParse_subPageIds}        

}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SignUp" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;signupInput&quot;: {
    &quot;email&quot;: &quot;stresstestcore${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}@getnada.com&quot;,
    &quot;firstname&quot;: &quot;test_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}&quot;,
    &quot;lastname&quot;: &quot;account_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}&quot;,
    &quot;password&quot;: &quot;QWRtaW5AMTIz&quot;,
    &quot;preferencesIds&quot;: [1,2],
    &quot;signUpVia&quot;: &quot;NIL&quot;
  }
},&quot;query&quot;:&quot;mutation SignUp($signupInput: SignupInput) {\n  signUp(signupInput: $signupInput) {\n    userId\n    accessToken\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation SignUp($signupInput: SignupInput) {
  signUp(signupInput: $signupInput) {
    userId
    accessToken
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;signupInput&quot;: {
    &quot;email&quot;: &quot;stresstestcore${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}@getnada.com&quot;,
    &quot;firstname&quot;: &quot;test_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}&quot;,
    &quot;lastname&quot;: &quot;account_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000,10000)}&quot;,
    &quot;password&quot;: &quot;QWRtaW5AMTIz&quot;,
    &quot;preferencesIds&quot;: [1,2],
    &quot;signUpVia&quot;: &quot;NIL&quot;
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2OTA1MzQ4MDAsImV4cCI6MTY5MzEyNjgwMCwicHJtIjoiYTNkZDBjZDcxNWY0MmIyMzc0ZDk4YzU2MjJhOWRiNzciLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiJhMzFmOGUxOS05ZDMwLTRiY2YtYTIxYi00YTJjNzdiMzRiMDEifQ.Rj3yE7V0HiHApOgH9lNVqe8epqP9aYXDnwNkp9QzFo66q208W12heks4XwMvZLRGdAGO9qVvvL52qhu8s7vwXJJHh4ch4dhFb-UALbFwLul2Oxdd9k0VWh1WFdf0-J391kK2U1_sqLpvqKEnohtAYDoeUSNTjG3lI5MeOyhL1amr1ULeDBtfqupoTA4kDAwyduKgN7vPWJLXyyUn54UEO25XaJ9jmQI4n7Yj7vXkkrWvsZUmbA6PR_2cUXHeqBIIUDzZV85zIFSyOkdHfGTnqF6b1o73lKVEhd_lbgeXI1GSlM5whm7pMuj1mBnk5TA9xwRZvhL8AIIBCXK61tGS2g</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sParse_userId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">sParse_userId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">{&quot;userId&quot;:</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">}</stringProp>
            <stringProp name="BoundaryExtractor.default">sParse_userId_NF</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_userId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_userId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_userId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_accessToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_accessToken</stringProp>
            <stringProp name="RegexExtractor.regex">,&quot;accessToken&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_accessToken_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserById" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getUserByIdId&quot;: ${sParse_userId}
},&quot;query&quot;:&quot;query GetUserById($getUserByIdId: Int!) {\n  getUserById(id: $getUserByIdId) {\n    id\n    profileImage\n    backgroundImage\n    backgroundImageThumbnail\n    videoThumbnail\n    firstname\n    lastname\n    username\n    weight\n    height\n    SATScore\n    HSGraduationYear\n    highSchoolLevel\n    isEmailConfirmed\n    gender\n    birthDate\n    businessEmail\n    city\n    state\n    bio\n    viewEditProfile\n    email\n    userAchievements {\n      id\n      userId\n      achievement\n      team\n      position\n      date\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserById($getUserByIdId: Int!) {
  getUserById(id: $getUserByIdId) {
    id
    profileImage
    backgroundImage
    backgroundImageThumbnail
    videoThumbnail
    firstname
    lastname
    username
    weight
    height
    SATScore
    HSGraduationYear
    highSchoolLevel
    isEmailConfirmed
    gender
    birthDate
    businessEmail
    city
    state
    bio
    viewEditProfile
    email
    userAchievements {
      id
      userId
      achievement
      team
      position
      date
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getUserByIdId&quot;: ${sParse_userId}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1294635157">errors</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetClubDetailsWithSubscriptions" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username}&quot;
},&quot;query&quot;:&quot;query GetClubWithSubscriptions($username: String) {\n  getClubWithSubscriptions(username: $username) {\n        id\n        username\n        email\n        userId\n        title\n        content\n        mediaData\n        freeTierBenefits\n        memberBenefits\n        nftData\n        createdAt\n        updatedAt\n        isActive\n      subscriptions {\n        id\n        clubId\n        type\n        packageType\n        name\n        detail\n        cost\n        period\n        nftData\n        customBenefits\n        expirationDate\n        createdAt\n        updatedAt\n        isActive\n      }\n      subPageIds\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetClubWithSubscriptions($username: String) {
  getClubWithSubscriptions(username: $username) {
        id
        username
        email
        userId
        title
        content
        mediaData
        freeTierBenefits
        memberBenefits
        nftData
        createdAt
        updatedAt
        isActive
      subscriptions {
        id
        clubId
        type
        packageType
        name
        detail
        cost
        period
        nftData
        customBenefits
        expirationDate
        createdAt
        updatedAt
        isActive
      }
      subPageIds
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserClub" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{

        &quot;userClubArgument&quot;: {

                &quot;userId&quot;: ${sParse_userId},

                &quot;clubId&quot;: ${sParse_clubId}

        }

},&quot;query&quot;:&quot;query GetUserClub($userClubArgument: UserClubParams) {\n\t getUserClub(userClubArgument: $userClubArgument) {\n        \tid\n        \tuserId\n        \tclubId\n        \tsubscription {\n        \t\tid\n        \t\ttransactionId\n        \t\tsubscriptionId\n        \t\ttype\n        \t\tname\n        \t\tdetail\n        \t\tperiod\n        \t\toccurrence\n        \t\tcost\n        \t\tcustomBenefits\n        \t\tnftData\n        \t\t}\n        \t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserClub($userClubArgument: UserClubParams) {
	 getUserClub(userClubArgument: $userClubArgument) {
        	id
        	userId
        	clubId
        	subscription {
        		id
        		transactionId
        		subscriptionId
        		type
        		name
        		detail
        		period
        		occurrence
        		cost
        		customBenefits
        		nftData
        		}
        	}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{

        &quot;userClubArgument&quot;: {

                &quot;userId&quot;: ${sParse_userId},

                &quot;clubId&quot;: ${sParse_clubId}

        }

}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserStatistic" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: ${sParse_userId}
},&quot;query&quot;:&quot;query GetUserStatistic($userId: Int!) {\n  getUserStatistic(userId: $userId) {\n    id\n    userId\n    firebaseNotificationCount\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserStatistic($userId: Int!) {
  getUserStatistic(userId: $userId) {
    id
    userId
    firebaseNotificationCount
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: ${sParse_userId}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetClubDetailsWithSubscriptions" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username}&quot;
},&quot;query&quot;:&quot;query GetClubWithSubscriptions($username: String) {\n  getClubWithSubscriptions(username: $username) {\n        id\n        username\n        email\n        userId\n        title\n        content\n        mediaData\n        freeTierBenefits\n        memberBenefits\n        nftData\n        createdAt\n        updatedAt\n        isActive\n      subscriptions {\n        id\n        clubId\n        type\n        packageType\n        name\n        detail\n        cost\n        period\n        nftData\n        customBenefits\n        expirationDate\n        createdAt\n        updatedAt\n        isActive\n      }\n      subPageIds\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetClubWithSubscriptions($username: String) {
  getClubWithSubscriptions(username: $username) {
        id
        username
        email
        userId
        title
        content
        mediaData
        freeTierBenefits
        memberBenefits
        nftData
        createdAt
        updatedAt
        isActive
      subscriptions {
        id
        clubId
        type
        packageType
        name
        detail
        cost
        period
        nftData
        customBenefits
        expirationDate
        createdAt
        updatedAt
        isActive
      }
      subPageIds
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserClub" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{

        &quot;userClubArgument&quot;: {

                &quot;userId&quot;: ${sParse_userId},

                &quot;clubId&quot;: ${sParse_clubId}

        }

},&quot;query&quot;:&quot;query GetUserClub($userClubArgument: UserClubParams) {\n\t getUserClub(userClubArgument: $userClubArgument) {\n        \tid\n        \tuserId\n        \tclubId\n        \tsubscription {\n        \t\tid\n        \t\ttransactionId\n        \t\tsubscriptionId\n        \t\ttype\n        \t\tname\n        \t\tdetail\n        \t\tperiod\n        \t\toccurrence\n        \t\tcost\n        \t\tcustomBenefits\n        \t\tnftData\n        \t\t}\n        \t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserClub($userClubArgument: UserClubParams) {
	 getUserClub(userClubArgument: $userClubArgument) {
        	id
        	userId
        	clubId
        	subscription {
        		id
        		transactionId
        		subscriptionId
        		type
        		name
        		detail
        		period
        		occurrence
        		cost
        		customBenefits
        		nftData
        		}
        	}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{

        &quot;userClubArgument&quot;: {

                &quot;userId&quot;: ${sParse_userId},

                &quot;clubId&quot;: ${sParse_clubId}

        }

}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddFreeOptionalSubscription" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;freeOptionalSubscriptionArgument&quot;: {
      &quot;subscriptionId&quot;: 0,
      &quot;clubId&quot;: ${sParse_clubId},
      &quot;selectedTeam&quot;: &quot;[]&quot;,
      &quot;isOptionalSub&quot;: false,
	 &quot;userId&quot;: ${sParse_userId}
	}
},&quot;query&quot;:&quot;mutation AddFreeOptionalSubscription(\n    $freeOptionalSubscriptionArgument: freeOptionalSubscriptionArgument!\n  ) {\n    addFreeOptionalSubscription(freeOptionalSubscriptionArgument: $freeOptionalSubscriptionArgument){\n      status\n      message\n    }\n  }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddFreeOptionalSubscription(
    $freeOptionalSubscriptionArgument: freeOptionalSubscriptionArgument!
  ) {
    addFreeOptionalSubscription(freeOptionalSubscriptionArgument: $freeOptionalSubscriptionArgument){
      status
      message
    }
  }
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;freeOptionalSubscriptionArgument&quot;: {
      &quot;subscriptionId&quot;: 0,
      &quot;clubId&quot;: ${sParse_clubId},
      &quot;selectedTeam&quot;: &quot;[]&quot;,
      &quot;isOptionalSub&quot;: false,
	 &quot;userId&quot;: ${sParse_userId}
	}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserClub" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{

        &quot;userClubArgument&quot;: {

                &quot;userId&quot;: ${sParse_userId},

                &quot;clubId&quot;: ${sParse_clubId}

        }

},&quot;query&quot;:&quot;query GetUserClub($userClubArgument: UserClubParams) {\n\t getUserClub(userClubArgument: $userClubArgument) {\n        \tid\n        \tuserId\n        \tclubId\n        \tsubscription {\n        \t\tid\n        \t\ttransactionId\n        \t\tsubscriptionId\n        \t\ttype\n        \t\tname\n        \t\tdetail\n        \t\tperiod\n        \t\toccurrence\n        \t\tcost\n        \t\tcustomBenefits\n        \t\tnftData\n        \t\t}\n        \t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserClub($userClubArgument: UserClubParams) {
	 getUserClub(userClubArgument: $userClubArgument) {
        	id
        	userId
        	clubId
        	subscription {
        		id
        		transactionId
        		subscriptionId
        		type
        		name
        		detail
        		period
        		occurrence
        		cost
        		customBenefits
        		nftData
        		}
        	}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{

        &quot;userClubArgument&quot;: {

                &quot;userId&quot;: ${sParse_userId},

                &quot;clubId&quot;: ${sParse_clubId}

        }

}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sParse_nftEditionId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">sParse_nftEditionId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;,&quot;nftEditionId&quot;:</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">}</stringProp>
            <stringProp name="BoundaryExtractor.default">sParse_nftEditionId_NF</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserDetailsById" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;id&quot;: ${id},
  &quot;userId&quot;: ${sParse_userId}
},&quot;query&quot;:&quot;query getUserDetailsById($id: Int!, $userId: Int!) {\n  getUserDetailsById(id: $id) {\n    id\n    username\n    firstname\n    lastname\n    userInstitutions {\n      College {\n        institution {\n          name\n        }\n      }\n    }\n    preferences {\n      id\n      name\n    }\n    dwollaCustomer {\n      status\n    }\n    isPeopleBookmarked\n    backgroundVideoData\n    backgroundImage\n    backgroundImageThumbnail\n    profileImage\n    email\n    isFollowing(userId: $userId)\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getUserDetailsById($id: Int!, $userId: Int!) {
  getUserDetailsById(id: $id) {
    id
    username
    firstname
    lastname
    userInstitutions {
      College {
        institution {
          name
        }
      }
    }
    preferences {
      id
      name
    }
    dwollaCustomer {
      status
    }
    isPeopleBookmarked
    backgroundVideoData
    backgroundImage
    backgroundImageThumbnail
    profileImage
    email
    isFollowing(userId: $userId)
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;id&quot;: ${id},
  &quot;userId&quot;: ${sParse_userId}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddFollowers" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{  &quot;userId&quot;: ${sParse_userId},
  &quot;followingId&quot;: ${id}
},&quot;query&quot;:&quot;mutation AddFollowers($userId: Int!, $followingId: Int!) {\n  addFollowers(userId: $userId, followingId: $followingId)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddFollowers($userId: Int!, $followingId: Int!) {
  addFollowers(userId: $userId, followingId: $followingId)
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{  &quot;userId&quot;: ${sParse_userId},
  &quot;followingId&quot;: ${id}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getNFTEditionActivities" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;nftEditionId&quot;: ${nftEditionId},
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
},&quot;query&quot;:&quot;query getNFTEditionActivities(\n  $nftEditionId: Int!\n  $sortBy: sortByActivityType\n  $take: Int\n  $cursor: Int\n) {\n  getNFTEditionActivities(\n    nftActivitiesArgs: {\n      nftEditionId: $nftEditionId\n      cursor: $cursor\n      take: $take\n      sortBy: $sortBy\n    }\n  ) {\n    pageEdges {\n      node {\n        id\n        type\n        nftId\n        nftEditionId\n        nftEdition {\n          price\n        }\n        buyerId\n        buyer {\n          id\n          firstname\n          lastname\n          profileImage\n        }\n        sellerId\n        seller {\n          id\n          firstname\n          lastname\n          profileImage\n        }\n        qty\n        price\n        createdAt\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getNFTEditionActivities(
  $nftEditionId: Int!
  $sortBy: sortByActivityType
  $take: Int
  $cursor: Int
) {
  getNFTEditionActivities(
    nftActivitiesArgs: {
      nftEditionId: $nftEditionId
      cursor: $cursor
      take: $take
      sortBy: $sortBy
    }
  ) {
    pageEdges {
      node {
        id
        type
        nftId
        nftEditionId
        nftEdition {
          price
        }
        buyerId
        buyer {
          id
          firstname
          lastname
          profileImage
        }
        sellerId
        seller {
          id
          firstname
          lastname
          profileImage
        }
        qty
        price
        createdAt
      }
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;nftEditionId&quot;: ${nftEditionId},
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getNFTItems" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;nftEditionId&quot;: ${nftEditionId},
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
},&quot;query&quot;:&quot;query getNFTItems(\n  $nftEditionId: Int!\n  $sortBy: sortByType\n  $take: Int\n  $cursor: Int\n) {\n  getNFTItems(\n    nftItemArgs: {\n      nftEditionId: $nftEditionId\n      cursor: $cursor\n      take: $take\n      sortBy: $sortBy\n    }\n  ) {\n    pageEdges {\n      node {\n        id\n        userId\n        user {\n          id\n          firstname\n          lastname\n          profileImage\n          dwollaCustomer {\n            status\n          }\n        }\n        qty\n        qtyLeft\n        forSaleQty\n        createdAt\n        updatedAt\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getNFTItems(
  $nftEditionId: Int!
  $sortBy: sortByType
  $take: Int
  $cursor: Int
) {
  getNFTItems(
    nftItemArgs: {
      nftEditionId: $nftEditionId
      cursor: $cursor
      take: $take
      sortBy: $sortBy
    }
  ) {
    pageEdges {
      node {
        id
        userId
        user {
          id
          firstname
          lastname
          profileImage
          dwollaCustomer {
            status
          }
        }
        qty
        qtyLeft
        forSaleQty
        createdAt
        updatedAt
      }
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;nftEditionId&quot;: ${nftEditionId},
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getNFTEdition" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: 9005,
  &quot;nftEditionStatus&quot;: &quot;Listed&quot;,
  &quot;take&quot;: 11
},&quot;query&quot;:&quot;query getNFTEdition(\n  $nftEditionStatus: NFTEditionStatus\n  $activityIds: [Int]\n  $sortBy: NFTSortBy\n  $tiers: [NFTEditionTier]\n  $userId: Int\n  $take: Int\n  $cursor: Int\n  $pageNo: Int\n  $priceRange: PriceRange\n  $isForSale: Boolean\n) {\n  getNFTEdition(\n    getNFTEditionsArgs: {\n      nftEditionStatus: $nftEditionStatus\n      activityIds: $activityIds\n      sortBy: $sortBy\n      tiers: $tiers\n      userId: $userId\n      take: $take\n      cursor: $cursor\n      pageNo: $pageNo\n      priceRange: $priceRange\n      isForSale: $isForSale\n    }\n  ) {\n    pageEdges {\n      node {\n        id\n        associatedTiers(nftEditionStatus: $nftEditionStatus, userId: $userId)\n        tier\n        status\n        createdAt\n        isRelisted\n        isBookmarked\n        seriesNumber\n        nftId\n        price\n        left\n        size\n        tier\n        autoGenerated\n        nft {\n          id\n          description\n          name\n          isNFTBookmarked\n          isLiked\n          likeCount\n          imageUrl\n          videoData\n          viewCount\n          user {\n            id\n            firstname\n            lastname\n            username\n            profileImage\n            dwollaCustomer {\n              status\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n      pageNo\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getNFTEdition(
  $nftEditionStatus: NFTEditionStatus
  $activityIds: [Int]
  $sortBy: NFTSortBy
  $tiers: [NFTEditionTier]
  $userId: Int
  $take: Int
  $cursor: Int
  $pageNo: Int
  $priceRange: PriceRange
  $isForSale: Boolean
) {
  getNFTEdition(
    getNFTEditionsArgs: {
      nftEditionStatus: $nftEditionStatus
      activityIds: $activityIds
      sortBy: $sortBy
      tiers: $tiers
      userId: $userId
      take: $take
      cursor: $cursor
      pageNo: $pageNo
      priceRange: $priceRange
      isForSale: $isForSale
    }
  ) {
    pageEdges {
      node {
        id
        associatedTiers(nftEditionStatus: $nftEditionStatus, userId: $userId)
        tier
        status
        createdAt
        isRelisted
        isBookmarked
        seriesNumber
        nftId
        price
        left
        size
        tier
        autoGenerated
        nft {
          id
          description
          name
          isNFTBookmarked
          isLiked
          likeCount
          imageUrl
          videoData
          viewCount
          user {
            id
            firstname
            lastname
            username
            profileImage
            dwollaCustomer {
              status
            }
          }
        }
      }
    }
    pageInfo {
      hasNextPage
      totalCount
      pageNo
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: 9005,
  &quot;nftEditionStatus&quot;: &quot;Listed&quot;,
  &quot;take&quot;: 11
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation {\n  login(\n    loginInput: {\n      email: \&quot;${email}\&quot;\n      password: \&quot;QWRtaW5AMTIz\&quot;\n    }\n  ) {\n    accessToken\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation {
  login(
    loginInput: {
      email: &quot;${email}&quot;
      password: &quot;QWRtaW5AMTIz&quot;
    }
  ) {
    accessToken
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">api.stress.nxlvldev.app</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODg5ODY3NjYsImV4cCI6MTY5MTU3ODc2NiwicHJtIjoiY2QwYmI3YjY1MTg0MmNkNGQ5ZjY4N2NkZTRmYTI1NWYiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI4MmFiMTYxMS1kMjFmLTQ2YmUtOWY3OC04ZjYzMWVlMTU3YmQifQ.EWtPA6GnuikcCm3Mq4xI6SXgBL5Oa2frJ4YoUDr3RvJulI4-FluCjLew2KnglHK2sb2GitQA-EkeMaLNCQiwLxb45frD1PsfWpf_L6Kp6dTxygDWJd2I6-hfPWGrLkWIGjJ7m-H7uGqsVgWn2IOkIcLGUrkuc5QeqB4g1a0W-dDOznlH6mj9UosYRC2EBS9jtS_sEXWwvaSjRxU0GdkvpicwDj6Js5uXYDQiV7AHJDilWL9gbqmKhJ5fqA585e30tFJdt1e45OLBrcQvxZY8uA_9Dui7pOypmP4sOe7VSXlsfagtpFnWA7jlvwMqxP03STowHOLuz1KxJGClDSp7Qw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserById" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getUserByIdId&quot;: ${id1}
},&quot;query&quot;:&quot;query GetUserById($getUserByIdId: Int!) {\n  getUserById(id: $getUserByIdId) {\n    id\n    profileImage\n    backgroundImage\n    backgroundImageThumbnail\n    videoThumbnail\n    firstname\n    lastname\n    username\n    weight\n    height\n    SATScore\n    HSGraduationYear\n    highSchoolLevel\n    isEmailConfirmed\n    gender\n    birthDate\n    businessEmail\n    city\n    state\n    bio\n    viewEditProfile\n    email\n    userAchievements {\n      id\n      userId\n      achievement\n      team\n      position\n      date\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserById($getUserByIdId: Int!) {
  getUserById(id: $getUserByIdId) {
    id
    profileImage
    backgroundImage
    backgroundImageThumbnail
    videoThumbnail
    firstname
    lastname
    username
    weight
    height
    SATScore
    HSGraduationYear
    highSchoolLevel
    isEmailConfirmed
    gender
    birthDate
    businessEmail
    city
    state
    bio
    viewEditProfile
    email
    userAchievements {
      id
      userId
      achievement
      team
      position
      date
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getUserByIdId&quot;: ${id1}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserByUsername" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;username&quot;: &quot;${username1}&quot;
},&quot;query&quot;:&quot;query GetUserByUsername($username: String!) {\n  getUserByUsername(username: $username) {\n    id\n    firstname\n    lastname\n    username\n    email\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserByUsername($username: String!) {
  getUserByUsername(username: $username) {
    id
    firstname
    lastname
    username
    email
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;username&quot;: &quot;${username1}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getPreferenceActivities" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;ids&quot;: [1],
  &quot;searchString&quot;: &quot;&quot;,
  &quot;limit&quot;: 10
},&quot;query&quot;:&quot;query getPreferenceActivities($ids: [Int], $searchString: String, $limit: Int) {\n  getPreferenceActivities(ids: $ids, searchString: $searchString, limit: $limit) {\n    id\n    name\n    iconURL\n    showTeams\n    attributes(isActivity: true) {\n      id\n      isMedia\n      isActivity\n      isSingleSelectList\n      showOnTeams\n      measureData {\n        activityLabel\n        buttonLabel\n        dbUnit\n        defaultUnit\n        list\n        mask {\n          displayFormat\n          label\n          pickers\n        }\n        max\n        min\n        picker\n        start\n        type\n        seasonLabel\n        unitChange\n      }\n      name\n      displayName\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getPreferenceActivities($ids: [Int], $searchString: String, $limit: Int) {
  getPreferenceActivities(ids: $ids, searchString: $searchString, limit: $limit) {
    id
    name
    iconURL
    showTeams
    attributes(isActivity: true) {
      id
      isMedia
      isActivity
      isSingleSelectList
      showOnTeams
      measureData {
        activityLabel
        buttonLabel
        dbUnit
        defaultUnit
        list
        mask {
          displayFormat
          label
          pickers
        }
        max
        min
        picker
        start
        type
        seasonLabel
        unitChange
      }
      name
      displayName
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;ids&quot;: [1],
  &quot;searchString&quot;: &quot;&quot;,
  &quot;limit&quot;: 10
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAllUserActivities" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: ${id1}
},&quot;query&quot;:&quot;query getAllUserActivities($userId: Int!) {\n  getAllUserActivities(userId: $userId) {\n    id\n    activityId\n    backgroundImage\n    updatedAt\n    backgroundVideoData\n    createdAt\n    userActivityAttributeValue {\n      attributeValues {\n        dbUnit\n        name\n        type\n        userUnit\n        userValue\n        value\n        id\n        displayValue\n      }\n    }\n    preferenceActivity {\n      id\n      iconURL\n      name\n      featuredAttributes {\n        id\n        name\n        displayName\n        attributesOnContents(userId: $userId) {\n          attributeId\n          contentId\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getAllUserActivities($userId: Int!) {
  getAllUserActivities(userId: $userId) {
    id
    activityId
    backgroundImage
    updatedAt
    backgroundVideoData
    createdAt
    userActivityAttributeValue {
      attributeValues {
        dbUnit
        name
        type
        userUnit
        userValue
        value
        id
        displayValue
      }
    }
    preferenceActivity {
      id
      iconURL
      name
      featuredAttributes {
        id
        name
        displayName
        attributesOnContents(userId: $userId) {
          attributeId
          contentId
        }
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: ${id1}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchUser" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;searchUserInput&quot;: {
    &quot;userId&quot;: ${id1},
    &quot;searchString&quot;: &quot;&quot;
  }
},&quot;query&quot;:&quot;query SearchUser($searchUserInput: SearchUserInput) {\n  searchUser(searchUserInput: $searchUserInput) {\n    pageEdges {\n      node {\n        id\n        firstname\n        lastname\n        username\n        instituteName\n        profileThumbnail\n        mutualConnectionCount\n        backgroundImageThumbnail\n        followerCount\n        xmppUsername\n      }\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query SearchUser($searchUserInput: SearchUserInput) {
  searchUser(searchUserInput: $searchUserInput) {
    pageEdges {
      node {
        id
        firstname
        lastname
        username
        instituteName
        profileThumbnail
        mutualConnectionCount
        backgroundImageThumbnail
        followerCount
        xmppUsername
      }
    }
    pageInfo {
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;searchUserInput&quot;: {
    &quot;userId&quot;: ${id1},
    &quot;searchString&quot;: &quot;&quot;
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjczNTA0NTY2LCJleHAiOjE2NzYwOTY1NjYsInBybSI6ImUxOWVhODBkOGNjMjJmZGRhNWUwMDMwMzYxY2RmY2QxIiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjFmZTllY2EwLTA5MzMtNGNhMC1iMjBiLTY2NGRlNGQzZWFlNiJ9.RHkZRWvVc1aFnmjGD-IfRxpzuVLjsKFgK_1cuUGfEf0Uf7r4GV8JSBd7ycgX5XKQuPvW_NiG5EOfwf2kiYHSZj4SKDCghW25BMgkgGUx5wyr4fcqkZ17hkcDR4LHMYxiKRjIYIUNkacRFOJraoPPGSBNazSgzUtQkVX1wNXZuB-z6hrN0ypBn99u2O9jr5fqiU_Way-qU7-gAd2KK8tisJb6DYTysaobkxlLRpdzzUWObT6uUceVU2jiibHybZwSAb6QeA3MqId9igQQvfwk0CarF1Krt7b-T7Td15nUgLj-pgFm83PnszmQiKFrZG53Ij9dQi1IMHcbmf6P99bnFQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserOffers" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: ${id1}
},&quot;query&quot;:&quot;query getUserOffers($userId: Int!) {\n  getUserOffers(userId: $userId) {\n    institution {\n      id\n      name\n      city\n      state\n    }\n    institutionId\n    description\n    id\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getUserOffers($userId: Int!) {
  getUserOffers(userId: $userId) {
    institution {
      id
      name
      city
      state
    }
    institutionId
    description
    id
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: ${id1}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjczNTA0NTY2LCJleHAiOjE2NzYwOTY1NjYsInBybSI6ImUxOWVhODBkOGNjMjJmZGRhNWUwMDMwMzYxY2RmY2QxIiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjFmZTllY2EwLTA5MzMtNGNhMC1iMjBiLTY2NGRlNGQzZWFlNiJ9.RHkZRWvVc1aFnmjGD-IfRxpzuVLjsKFgK_1cuUGfEf0Uf7r4GV8JSBd7ycgX5XKQuPvW_NiG5EOfwf2kiYHSZj4SKDCghW25BMgkgGUx5wyr4fcqkZ17hkcDR4LHMYxiKRjIYIUNkacRFOJraoPPGSBNazSgzUtQkVX1wNXZuB-z6hrN0ypBn99u2O9jr5fqiU_Way-qU7-gAd2KK8tisJb6DYTysaobkxlLRpdzzUWObT6uUceVU2jiibHybZwSAb6QeA3MqId9igQQvfwk0CarF1Krt7b-T7Td15nUgLj-pgFm83PnszmQiKFrZG53Ij9dQi1IMHcbmf6P99bnFQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserActivityTeams" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: ${id1},
  &quot;activityId&quot;: 1
},&quot;query&quot;:&quot;query getUserActivityTeams($userId: Int!, $activityId: Int!) {\n  getUserActivityTeams(userId: $userId, activityId: $activityId) {\n    id\n    name\n    season\n    institutionName\n    city\n    state\n    institution {\n      address\n      id\n      name\n      city\n      state\n    }\n    lists\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getUserActivityTeams($userId: Int!, $activityId: Int!) {
  getUserActivityTeams(userId: $userId, activityId: $activityId) {
    id
    name
    season
    institutionName
    city
    state
    institution {
      address
      id
      name
      city
      state
    }
    lists
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: ${id1},
  &quot;activityId&quot;: 1
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjY4ODUyLCJwZXJtIjoiIiwiaWF0IjoxNjczNTA0NTY2LCJleHAiOjE2NzYwOTY1NjYsInBybSI6ImUxOWVhODBkOGNjMjJmZGRhNWUwMDMwMzYxY2RmY2QxIiwiamlkIjoiY2xidzMyOXM0MDAwMHkxMGw2cjVxeTVld0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ3MzI5czQwMDAweTEwbDZyNXF5NWV3IiwidWtleSI6ImE3ZjVmZjhmLTZmNDMtNDRjMC1hZGQwLTFmMDMzYjg5NGMwZCIsImNsaWVudCI6IiIsImp0aSI6IjFmZTllY2EwLTA5MzMtNGNhMC1iMjBiLTY2NGRlNGQzZWFlNiJ9.RHkZRWvVc1aFnmjGD-IfRxpzuVLjsKFgK_1cuUGfEf0Uf7r4GV8JSBd7ycgX5XKQuPvW_NiG5EOfwf2kiYHSZj4SKDCghW25BMgkgGUx5wyr4fcqkZ17hkcDR4LHMYxiKRjIYIUNkacRFOJraoPPGSBNazSgzUtQkVX1wNXZuB-z6hrN0ypBn99u2O9jr5fqiU_Way-qU7-gAd2KK8tisJb6DYTysaobkxlLRpdzzUWObT6uUceVU2jiibHybZwSAb6QeA3MqId9igQQvfwk0CarF1Krt7b-T7Td15nUgLj-pgFm83PnszmQiKFrZG53Ij9dQi1IMHcbmf6P99bnFQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserLinks" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username1}&quot;
},&quot;query&quot;:&quot;query getUserLinks($username: String!) {\n  getUserLinks(username: $username) {\n    id\n    firstname\n    lastname\n    username\n    profileImage\n    backgroundImage\n    backgroundVideoData\n    city\n    state\n    businessEmail\n    bio\n    extensionType\n    userLinks {\n      id\n      linkName\n      linkURL\n      companyIcon\n      orderIndex\n      category\n      domain\n      linkTitle\n      metadata\n      customCategory {\n        id\n        userId\n        label\n      }\n    }\n    primaryVideo {\n      id\n      videoData\n      label\n      disableLabel\n    }\n    commitmentVideo {\n      id\n      videoData\n      label\n      institution {\n        id\n        name\n        city\n        state\n      }\n    }\n    linkSettings {\n      id\n      userId\n      isVideoEnable\n      businessEmail\n      categoryOrder\n      backgroundImage\n      collapsedPreview\n      contents\n      advancedColorOptions\n      backgroundData\n      primaryColor\n    }\n    linkCategoryTypes {\n      id\n      category\n      orderIndex\n      categoryIndex\n    }\n    applicationFlags {\n      id\n      flags\n    }\n    preferences {\n      id\n      name\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.stress.nxconnect.me</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getUserLinks($username: String!) {
  getUserLinks(username: $username) {
    id
    firstname
    lastname
    username
    profileImage
    backgroundImage
    backgroundVideoData
    city
    state
    businessEmail
    bio
    extensionType
    userLinks {
      id
      linkName
      linkURL
      companyIcon
      orderIndex
      category
      domain
      linkTitle
      metadata
      customCategory {
        id
        userId
        label
      }
    }
    primaryVideo {
      id
      videoData
      label
      disableLabel
    }
    commitmentVideo {
      id
      videoData
      label
      institution {
        id
        name
        city
        state
      }
    }
    linkSettings {
      id
      userId
      isVideoEnable
      businessEmail
      categoryOrder
      backgroundImage
      collapsedPreview
      contents
      advancedColorOptions
      backgroundData
      primaryColor
    }
    linkCategoryTypes {
      id
      category
      orderIndex
      categoryIndex
    }
    applicationFlags {
      id
      flags
    }
    preferences {
      id
      name
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username1}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2OTA1MzQ4MDAsImV4cCI6MTY5MzEyNjgwMCwicHJtIjoiYTNkZDBjZDcxNWY0MmIyMzc0ZDk4YzU2MjJhOWRiNzciLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiJhMzFmOGUxOS05ZDMwLTRiY2YtYTIxYi00YTJjNzdiMzRiMDEifQ.Rj3yE7V0HiHApOgH9lNVqe8epqP9aYXDnwNkp9QzFo66q208W12heks4XwMvZLRGdAGO9qVvvL52qhu8s7vwXJJHh4ch4dhFb-UALbFwLul2Oxdd9k0VWh1WFdf0-J391kK2U1_sqLpvqKEnohtAYDoeUSNTjG3lI5MeOyhL1amr1ULeDBtfqupoTA4kDAwyduKgN7vPWJLXyyUn54UEO25XaJ9jmQI4n7Yj7vXkkrWvsZUmbA6PR_2cUXHeqBIIUDzZV85zIFSyOkdHfGTnqF6b1o73lKVEhd_lbgeXI1GSlM5whm7pMuj1mBnk5TA9xwRZvhL8AIIBCXK61tGS2g</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetGalleryContents" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getContentsArgs&quot;: {
    &quot;userId&quot;: ${id1},
    &quot;cursor&quot;: 0,
    &quot;take&quot;: 10
  }
},&quot;query&quot;:&quot;query GetGalleryContents($getContentsArgs: GetContentsArgs) {\n  getGalleryContents(getContentsArgs: $getContentsArgs) {\n    data {\n      id\n      imageURL\n      contentWidth\n      contentHeight\n      isFollowing\n      user {\n        id\n        profileImage\n        email\n        firstname\n        lastname\n        username\n      }\n      taggedUsers {\n        id\n        username\n        lastname\n        username\n        profileImage\n      }\n      repostParentId\n      repostDescription\n      parentPost {\n        location\n        id\n        user {\n          id\n          firstname\n          lastname\n          username\n        }\n        description\n        taggedUsers {\n          id\n          username\n          firstname\n          lastname\n          profileImage\n        }\n        visibility\n        isDeleted\n        taggedContentUser {\n          id\n          firstname\n          lastname\n        }\n        taggedContentBy\n        taggedUsersCount\n      }\n      contentData\n      contentThumbnail\n      eventData {\n        eventName\n        eventType\n        eventStartDate\n        eventEndDate\n        eventLink\n        invites\n      }\n      description\n      createdAt\n      contentType\n      allowComments\n      allowSharing\n      isPinned\n      isPublished\n      allowRepost\n      commentCount\n      likeCount\n      reaction\n      visibility\n      location\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n      hasShowMore\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetGalleryContents($getContentsArgs: GetContentsArgs) {
  getGalleryContents(getContentsArgs: $getContentsArgs) {
    data {
      id
      imageURL
      contentWidth
      contentHeight
      isFollowing
      user {
        id
        profileImage
        email
        firstname
        lastname
        username
      }
      taggedUsers {
        id
        username
        lastname
        username
        profileImage
      }
      repostParentId
      repostDescription
      parentPost {
        location
        id
        user {
          id
          firstname
          lastname
          username
        }
        description
        taggedUsers {
          id
          username
          firstname
          lastname
          profileImage
        }
        visibility
        isDeleted
        taggedContentUser {
          id
          firstname
          lastname
        }
        taggedContentBy
        taggedUsersCount
      }
      contentData
      contentThumbnail
      eventData {
        eventName
        eventType
        eventStartDate
        eventEndDate
        eventLink
        invites
      }
      description
      createdAt
      contentType
      allowComments
      allowSharing
      isPinned
      isPublished
      allowRepost
      commentCount
      likeCount
      reaction
      visibility
      location
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
      hasShowMore
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getContentsArgs&quot;: {
    &quot;userId&quot;: ${id1},
    &quot;cursor&quot;: 0,
    &quot;take&quot;: 10
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetFeedContents" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;getFeedContentsId&quot;: ${id1},
  &quot;pageNo&quot;: 0,
  &quot;take&quot;: 10
},&quot;query&quot;:&quot;query GetFeedContents($take: Int, $pageNo: Int, $getFeedContentsId: Int!) {\n  getFeedContents(take: $take, pageNo: $pageNo, id: $getFeedContentsId) {\n    data {\n      id\n      imageURL\n      contentWidth\n      contentHeight\n      isFollowing\n      user {\n        id\n        profileImage\n        email\n        firstname\n        lastname\n        username\n      }\n      taggedUsers {\n        id\n        username\n        lastname\n        username\n        profileImage\n      }\n      repostParentId\n      repostDescription\n      parentPost {\n        location\n        id\n        user {\n          id\n          firstname\n          lastname\n          username\n        }\n        description\n        taggedUsers {\n          id\n          username\n          firstname\n          lastname\n          profileImage\n        }\n        visibility\n        isDeleted\n        taggedContentUser {\n          id\n          firstname\n          lastname\n        }\n        taggedContentBy\n        taggedUsersCount\n      }\n      contentData\n      contentThumbnail\n      eventData {\n        eventName\n        eventType\n        eventStartDate\n        eventEndDate\n        eventLink\n        invites\n      }\n      description\n      createdAt\n      contentType\n      allowComments\n      allowSharing\n      isPinned\n      allowRepost\n      commentCount\n      likeCount\n      reaction\n      visibility\n      location\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n      hasShowMore\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetFeedContents($take: Int, $pageNo: Int, $getFeedContentsId: Int!) {
  getFeedContents(take: $take, pageNo: $pageNo, id: $getFeedContentsId) {
    data {
      id
      imageURL
      contentWidth
      contentHeight
      isFollowing
      user {
        id
        profileImage
        email
        firstname
        lastname
        username
      }
      taggedUsers {
        id
        username
        lastname
        username
        profileImage
      }
      repostParentId
      repostDescription
      parentPost {
        location
        id
        user {
          id
          firstname
          lastname
          username
        }
        description
        taggedUsers {
          id
          username
          firstname
          lastname
          profileImage
        }
        visibility
        isDeleted
        taggedContentUser {
          id
          firstname
          lastname
        }
        taggedContentBy
        taggedUsersCount
      }
      contentData
      contentThumbnail
      eventData {
        eventName
        eventType
        eventStartDate
        eventEndDate
        eventLink
        invites
      }
      description
      createdAt
      contentType
      allowComments
      allowSharing
      isPinned
      allowRepost
      commentCount
      likeCount
      reaction
      visibility
      location
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
      hasShowMore
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;getFeedContentsId&quot;: ${id1},
  &quot;pageNo&quot;: 0,
  &quot;take&quot;: 10
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetDiscoverContents" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;searchContentArgs&quot;: {
    &quot;userId&quot;: ${id1},
    &quot;take&quot;: 10,
    &quot;pageNo&quot;: 0
  }
},&quot;query&quot;:&quot;query GetDiscoverContents($searchContentArgs: SearchContentArgs) {\n  getDiscoverContents(searchContentArgs: $searchContentArgs) {\n    data {\n      id\n      imageURL\n      contentWidth\n      contentHeight\n      isFollowing\n      user {\n        id\n        profileImage\n        email\n        firstname\n        lastname\n        username\n      }\n      taggedUsers {\n        id\n        username\n        lastname\n        username\n        profileImage\n      }\n      repostParentId\n      repostDescription\n      parentPost {\n        location\n        id\n        user {\n          id\n          firstname\n          lastname\n          username\n        }\n        description\n        taggedUsers {\n          id\n          username\n          firstname\n          lastname\n          profileImage\n        }\n        visibility\n        isDeleted\n        taggedContentUser {\n          id\n          firstname\n          lastname\n        }\n        taggedContentBy\n        taggedUsersCount\n      }\n      contentData\n      contentThumbnail\n      eventData {\n        eventName\n        eventType\n        eventStartDate\n        eventEndDate\n        eventLink\n        invites\n      }\n      isCommitment\n      isPrimary\n      description\n      createdAt\n      contentType\n      contentThumbnail\n      allowComments\n      allowSharing\n      isPinned\n      allowRepost\n      commentCount\n      likeCount\n      reaction\n      userId\n      visibility\n      location\n      taggedContentUser {\n        id\n        firstname\n        lastname\n      }\n      taggedContentBy\n      taggedUsersCount\n      hasShowMore\n      rsvp\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetDiscoverContents($searchContentArgs: SearchContentArgs) {
  getDiscoverContents(searchContentArgs: $searchContentArgs) {
    data {
      id
      imageURL
      contentWidth
      contentHeight
      isFollowing
      user {
        id
        profileImage
        email
        firstname
        lastname
        username
      }
      taggedUsers {
        id
        username
        lastname
        username
        profileImage
      }
      repostParentId
      repostDescription
      parentPost {
        location
        id
        user {
          id
          firstname
          lastname
          username
        }
        description
        taggedUsers {
          id
          username
          firstname
          lastname
          profileImage
        }
        visibility
        isDeleted
        taggedContentUser {
          id
          firstname
          lastname
        }
        taggedContentBy
        taggedUsersCount
      }
      contentData
      contentThumbnail
      eventData {
        eventName
        eventType
        eventStartDate
        eventEndDate
        eventLink
        invites
      }
      isCommitment
      isPrimary
      description
      createdAt
      contentType
      contentThumbnail
      allowComments
      allowSharing
      isPinned
      allowRepost
      commentCount
      likeCount
      reaction
      userId
      visibility
      location
      taggedContentUser {
        id
        firstname
        lastname
      }
      taggedContentBy
      taggedUsersCount
      hasShowMore
      rsvp
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;searchContentArgs&quot;: {
    &quot;userId&quot;: ${id1},
    &quot;take&quot;: 10,
    &quot;pageNo&quot;: 0
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getAttributesWithContent" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: ${id1}
},&quot;query&quot;:&quot;query getAttributesWithContent($userId: Int!) {\n  getAttributesWithContent(userId: $userId) {\n    id\n    name\n    displayName\n    attributesOnContents {\n      attributeId\n      attribute {\n        measureData {\n          activityLabel\n          buttonLabel\n          dbUnit\n          defaultUnit\n          list\n          mask {\n            displayFormat\n            label\n            pickers\n          }\n          max\n          min\n          picker\n          start\n          type\n          seasonLabel\n          unitChange\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getAttributesWithContent($userId: Int!) {
  getAttributesWithContent(userId: $userId) {
    id
    name
    displayName
    attributesOnContents {
      attributeId
      attribute {
        measureData {
          activityLabel
          buttonLabel
          dbUnit
          defaultUnit
          list
          mask {
            displayFormat
            label
            pickers
          }
          max
          min
          picker
          start
          type
          seasonLabel
          unitChange
        }
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: ${id1}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateContent" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation CreateContent{\n  createContent(\n  \tcontentArgs: {\n  \t\tallowComments: true,\n    \t\tallowRepost: false,\n    \t\tcontentType: Text,\n    \t\tdescription: \&quot;Stress Text Post_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000000,100000)}\&quot;,\n    \t\tisPinned: false,\n    \t\tuserId: ${id1},\n    \t\tvisibility: Public,\n    \t\tactivityIds: [${__Random(1,50,)},${__Random(51,100,)}]\n  })\n {\n    blobUrl\n    contentId\n    imageContentSignedUrl\n    signedUrl\n    thumbnailSignedUrl\n    videoThumbnailURL\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation CreateContent{
  createContent(
  	contentArgs: {
  		allowComments: true,
    		allowRepost: false,
    		contentType: Text,
    		description: &quot;Stress Text Post_${__time(yyMMddHHmmssSSS, cTime)}_${__Random(000000,100000)}&quot;,
    		isPinned: false,
    		userId: ${id1},
    		visibility: Public,
    		activityIds: [${__Random(1,50,)},${__Random(51,100,)}]
  })
 {
    blobUrl
    contentId
    imageContentSignedUrl
    signedUrl
    thumbnailSignedUrl
    videoThumbnailURL
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODkwNjc1MjcsImV4cCI6MTY5MTY1OTUyNywicHJtIjoiYTdmNjg0Y2ZhNjI0N2Y5NmZhZTA5ZDE2OTc0Y2IzNWUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIzNzU1NWQ5ZS1lY2M5LTQyY2EtYTYwNi0yZjUwM2UyNDQyNGIifQ.H9EmzmSJR4XEIHSZXUZM2AwxGnweOOm8ldIvmW6kE0RqO8DnrRl1minzUU1WnVn2kO7QMw1NG444Y9drC4vqC1xH9ikLC6IU-emIpNFZvIJYdDcyajbteknAmZo8m2p6RlvWWc046rdh54STTe3oM8915In_X6QCefeRq84vht3d9ddtB3O9BTVou4dZQUGpyZLUxbYKr5yINbmYIzS7MYW8-FdjmypACxKAQdtrsjMSaCaffygGqHdJpo0ECFqapqmTV_Iv0OoZKkv1kH5KY060gOIAdUmG1mPYUjW-225mXRh8XDELOScAqgFYk7lYrdV05RwQIbWouwAftujrkw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_contentId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_contentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;contentId&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_contentId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
ContentID = vars.get(&quot;sParse_contentId&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/Script/Ruled_Based/ContentID_27Jul.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(ContentID);
f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddLike" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddLike {\n  addLike(\n  \tcontentLikeArgs: {\n  \t\tcontentUserId: ${id1},\n  \t\tid: ${sParse_contentId},\n    \t\tlikedBy: ${Like_CAdd},\n    \t\treaction: Thumbs_Up\n  })\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddLike {
  addLike(
  	contentLikeArgs: {
  		contentUserId: ${id1},
  		id: ${sParse_contentId},
    		likedBy: ${Like_CAdd},
    		reaction: Thumbs_Up
  })
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODI5MzkxODIsImV4cCI6MTY4NTUzMTE4MiwicHJtIjoiZThjN2ExZTY5MjMzZDQwOGI4YWI1MTFhY2QzYzA3YTQiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI4ZWJmNWEyNy01OTIzLTRjMDAtODhiNC1jZWU4NGQyNGQwMGMifQ.SYP9snQ4bTzs-LP7f3uCQ-m-bI2VN3SjOA_fqn14izO2e6clXaSlNGhJ8iQUWDqESxJK7H11Dfz6Wn6OimTpJCnpfpdoKP0g7xtsLYYlf9ZxQdYyLlc5CzjsDQTRs5xrehIK5-d_5Js11KF5PEUaL9nzyoibyXy1PMWBCBff9uYwYvYoBXq5iXAaBBfXyf6HU-xs0MbpUFIacrGRlCN-wnNUpdeOcvPbh721DNMqfVD_golpT5vMDCUZBIUATc71PQbJrhxkuMQfUcU-xj6TZ190DQWpI7WOGHWFimQtUHfcEnE1LwtzgxhjpqCzHLmM2myKDZLHpgPO8c41NlP3mA</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddComment" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation AddComment{\n  addComment(\n  \tcontentCommentArgs: {\n    \t\tcontentId: ${sParse_contentId},\n    \t\tcommentText: \&quot;api stress test${__Random(1,5000,)}\&quot;,\n    \t\tcommentedBy: ${Like_CAdd},\n    \t\tid: ${id1}\n  \t}\n  \t) {\n    id\n    commentText\n    commentedBy\n    commenter {\n      id\n      firstname\n      lastname\n      username\n      email\n    }\n    }\n  }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddComment{
  addComment(
  	contentCommentArgs: {
    		contentId: ${sParse_contentId},
    		commentText: &quot;api stress test${__Random(1,5000,)}&quot;,
    		commentedBy: ${Like_CAdd},
    		id: ${id1}
  	}
  	) {
    id
    commentText
    commentedBy
    commenter {
      id
      firstname
      lastname
      username
      email
    }
    }
  }
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODg5ODY3NjYsImV4cCI6MTY5MTU3ODc2NiwicHJtIjoiY2QwYmI3YjY1MTg0MmNkNGQ5ZjY4N2NkZTRmYTI1NWYiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI4MmFiMTYxMS1kMjFmLTQ2YmUtOWY3OC04ZjYzMWVlMTU3YmQifQ.EWtPA6GnuikcCm3Mq4xI6SXgBL5Oa2frJ4YoUDr3RvJulI4-FluCjLew2KnglHK2sb2GitQA-EkeMaLNCQiwLxb45frD1PsfWpf_L6Kp6dTxygDWJd2I6-hfPWGrLkWIGjJ7m-H7uGqsVgWn2IOkIcLGUrkuc5QeqB4g1a0W-dDOznlH6mj9UosYRC2EBS9jtS_sEXWwvaSjRxU0GdkvpicwDj6Js5uXYDQiV7AHJDilWL9gbqmKhJ5fqA585e30tFJdt1e45OLBrcQvxZY8uA_9Dui7pOypmP4sOe7VSXlsfagtpFnWA7jlvwMqxP03STowHOLuz1KxJGClDSp7Qw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_CommentId" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_CommentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_CommentId_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//UserID = vars.get(&quot;sParse_id&quot;);
CommentID = vars.get(&quot;sParse_CommentId&quot;);
//log.info(UserID);  // if you want to log something to jmeter.log file
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(&quot;D:/NXLVL/Script/Ruled_Based/CommentID_17Jul.csv&quot;, true);
p = new PrintStream(f);
this.interpreter.setOut(p);
print(CommentID);
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
