<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
        <stringProp name="filename">GetUserClubWithSubscription_100Records.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">id,username</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">UserID_ClubID_10Lac.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">id,clubId</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
        <stringProp name="filename">C:/Users/pravin.parakhe/Documents/User-Club.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">userId,ClubId</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">910</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserClubWithSubscription" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username}&quot;
},&quot;query&quot;:&quot;query GetClubAndSub($username: String) {\n   getClubAndSub(username: $username) {\n\n      club {\n\t   id\n\t   username\n\t   email\n\t   userId\n\t   title\n\t   content\n\t   mediaData\n\t   freeTierBenefits\n\t   memberBenefits\n\t   nftData\n\t   createdAt\n\t   updatedAt\n\t   isActive\n\n      }\n\n      subscriptions {\n      \tid\n      \tclubId\n      \ttype\n      \tpackageType\n      \tname\n      \tdetail\n      \tcost\n      \tperiod\n      \tnftData\n      \tcustomBenefits\n      \texpirationDate\n      \tcreatedAt\n      \tupdatedAt\n      \tisActive\n      }\n\n      faq {\n      \tque\n      \tans\n      }\n\tsubPageIds\n\t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetClubAndSub($username: String) {
   getClubAndSub(username: $username) {

      club {
	   id
	   username
	   email
	   userId
	   title
	   content
	   mediaData
	   freeTierBenefits
	   memberBenefits
	   nftData
	   createdAt
	   updatedAt
	   isActive

      }

      subscriptions {
      	id
      	clubId
      	type
      	packageType
      	name
      	detail
      	cost
      	period
      	nftData
      	customBenefits
      	expirationDate
      	createdAt
      	updatedAt
      	isActive
      }

      faq {
      	que
      	ans
      }
	subPageIds
	}
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetClubDetailsWithFAQ" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username}&quot;
},&quot;query&quot;:&quot;query GetClubWithFaq($username: String) {\n  getClubWithFaq(username: $username) {\n        id\n        username\n        email\n        userId\n        title\n        content\n        mediaData\n        freeTierBenefits\n        memberBenefits\n        nftData\n        createdAt\n        updatedAt\n        isActive\n\t       subPageIds\n\t       faq{que,ans}\n      }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetClubWithFaq($username: String) {
  getClubWithFaq(username: $username) {
        id
        username
        email
        userId
        title
        content
        mediaData
        freeTierBenefits
        memberBenefits
        nftData
        createdAt
        updatedAt
        isActive
	       subPageIds
	       faq{que,ans}
      }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODgwNDcyMDQsImV4cCI6MTY5MDYzOTIwNCwicHJtIjoiNDJjMjNiMGVjODEzYzdlMjE0OGE1NDQ5ZTJiMWJjNjYiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI1MmRlNTFmNy04ZWQ5LTQwM2YtOGRkMi1iMGJjMmRlZTE4YzkifQ.HGPvHG9mR0Gl_GFkMFhYbJ8IX2fZmlu-Ire5EwS_UpVVcP0vNSLRgGYt_1kY8PP6zv7013S0TO-4LlGGWj4P1bmtzWnYnIIMy6RhFM30J2tyKhEH7BR94IRjdS08o9ZjX8j7OdshDdnIWYzcCVzXsAqpIHMJc5WXl1ysWKmwOadnKr5ZgdQMm5Wf2wGnRMdd2af0lyfJYJBTRCgnltaXCZMBNiT3hW9ua4TTCfDtjNXLeDv9i3resHnZLlmTvI9S8q7bJlaWBc50MH5UiJqmVnhqLBe3T6diMYUYbuhz_Kcn6y7rnlbVHqyC2mQ3KlavzGXlIerjAVBPyvl5_wfhHQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetClubDetailsWithSubscriptions" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username}&quot;
},&quot;query&quot;:&quot;query GetClubWithSubscriptions($username: String) {\n  getClubWithSubscriptions(username: $username) {\n        id\n        username\n        email\n        userId\n        title\n        content\n        mediaData\n        freeTierBenefits\n        memberBenefits\n        nftData\n        createdAt\n        updatedAt\n        isActive\n      subscriptions {\n        id\n        clubId\n        type\n        packageType\n        name\n        detail\n        cost\n        period\n        nftData\n        customBenefits\n        expirationDate\n        createdAt\n        updatedAt\n        isActive\n      }\n      subPageIds\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetClubWithSubscriptions($username: String) {
  getClubWithSubscriptions(username: $username) {
        id
        username
        email
        userId
        title
        content
        mediaData
        freeTierBenefits
        memberBenefits
        nftData
        createdAt
        updatedAt
        isActive
      subscriptions {
        id
        clubId
        type
        packageType
        name
        detail
        cost
        period
        nftData
        customBenefits
        expirationDate
        createdAt
        updatedAt
        isActive
      }
      subPageIds
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODgwNDcyMDQsImV4cCI6MTY5MDYzOTIwNCwicHJtIjoiNDJjMjNiMGVjODEzYzdlMjE0OGE1NDQ5ZTJiMWJjNjYiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI1MmRlNTFmNy04ZWQ5LTQwM2YtOGRkMi1iMGJjMmRlZTE4YzkifQ.HGPvHG9mR0Gl_GFkMFhYbJ8IX2fZmlu-Ire5EwS_UpVVcP0vNSLRgGYt_1kY8PP6zv7013S0TO-4LlGGWj4P1bmtzWnYnIIMy6RhFM30J2tyKhEH7BR94IRjdS08o9ZjX8j7OdshDdnIWYzcCVzXsAqpIHMJc5WXl1ysWKmwOadnKr5ZgdQMm5Wf2wGnRMdd2af0lyfJYJBTRCgnltaXCZMBNiT3hW9ua4TTCfDtjNXLeDv9i3resHnZLlmTvI9S8q7bJlaWBc50MH5UiJqmVnhqLBe3T6diMYUYbuhz_Kcn6y7rnlbVHqyC2mQ3KlavzGXlIerjAVBPyvl5_wfhHQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetClubDetails" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;username&quot;: &quot;${username}&quot;
},&quot;query&quot;:&quot;query GetClubPageDetails($username: String) {\n  getClubPageDetails(username: $username) {\n    id\n    username\n    email\n    userId\n    title\n    content\n    mediaData\n    freeTierBenefits\n    memberBenefits\n    nftData\n    createdAt\n    updatedAt\n    isActive\n    subPageIds\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetClubPageDetails($username: String) {
  getClubPageDetails(username: $username) {
    id
    username
    email
    userId
    title
    content
    mediaData
    freeTierBenefits
    memberBenefits
    nftData
    createdAt
    updatedAt
    isActive
    subPageIds
    }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;username&quot;: &quot;${username}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2ODgwNDcyMDQsImV4cCI6MTY5MDYzOTIwNCwicHJtIjoiNDJjMjNiMGVjODEzYzdlMjE0OGE1NDQ5ZTJiMWJjNjYiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiI1MmRlNTFmNy04ZWQ5LTQwM2YtOGRkMi1iMGJjMmRlZTE4YzkifQ.HGPvHG9mR0Gl_GFkMFhYbJ8IX2fZmlu-Ire5EwS_UpVVcP0vNSLRgGYt_1kY8PP6zv7013S0TO-4LlGGWj4P1bmtzWnYnIIMy6RhFM30J2tyKhEH7BR94IRjdS08o9ZjX8j7OdshDdnIWYzcCVzXsAqpIHMJc5WXl1ysWKmwOadnKr5ZgdQMm5Wf2wGnRMdd2af0lyfJYJBTRCgnltaXCZMBNiT3hW9ua4TTCfDtjNXLeDv9i3resHnZLlmTvI9S8q7bJlaWBc50MH5UiJqmVnhqLBe3T6diMYUYbuhz_Kcn6y7rnlbVHqyC2mQ3KlavzGXlIerjAVBPyvl5_wfhHQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserClub" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{

        &quot;userClubArgument&quot;: {

                &quot;userId&quot;: ${id},

                &quot;clubId&quot;: ${clubId}

        }

},&quot;query&quot;:&quot;query GetUserClub($userClubArgument: UserClubParams) {\n\t getUserClub(userClubArgument: $userClubArgument) {\n        \tid\n        \tuserId\n        \tclubId\n        \tsubscription {\n        \t\tid\n        \t\ttransactionId\n        \t\tsubscriptionId\n        \t\ttype\n        \t\tname\n        \t\tdetail\n        \t\tperiod\n        \t\toccurrence\n        \t\tcost\n        \t\tcustomBenefits\n        \t\tnftData\n        \t\t}\n        \t}\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetUserClub($userClubArgument: UserClubParams) {
	 getUserClub(userClubArgument: $userClubArgument) {
        	id
        	userId
        	clubId
        	subscription {
        		id
        		transactionId
        		subscriptionId
        		type
        		name
        		detail
        		period
        		occurrence
        		cost
        		customBenefits
        		nftData
        		}
        	}
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{

        &quot;userClubArgument&quot;: {

                &quot;userId&quot;: ${id},

                &quot;clubId&quot;: ${clubId}

        }

}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2OTcxNzYxMDYsImV4cCI6MTY5OTc2ODEwNiwicHJtIjoiYmVlM2ExNGVjNWViZGE2NjBkMzllMzlhY2Y3NzE3NzUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIyYWRhYzNmZS1mNGZmLTQ5OTgtOTZiNy1iZDJiMTAwZGUxZjUifQ.jDMt0tmNCbgdngDGUmYgZ1nyo9Cnmz1Njm4OHfSUK-X0G29AMFdLmBMbrOh91RzZF-RiYkJHXvvTL915PpaLfBFqg7wA7GlypxIRFe70DRQx3pu7cDLAB7rr50szSj5xadj34CXs-CTMOc8xDg4a54UmG5aCCaEohBRiTt44_zLDeOXZ9a-EnaSTqxmS3SzK4mKr1Lgc3ejVZqMdr_PbBSs5fNYHsEGfabJ9rk_PPERyTP7Rz-Y_CTXHZcbUdKXkCGT4gc3U_nvDiJanhxuqabyHErh_eIwTrIBfsOEn0-u3K6MW2SJHPHSBzBDP9CKv6Ge_qfKOYp07KpE-S-PTAQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetUserClub" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;notificationArgs&quot;: {
    &quot;take&quot;: 20,
    &quot;userId&quot;: ${id}
  }
},&quot;query&quot;:&quot;query GetFirebaseNotifications($notificationArgs: notificationArgument) {\n  getFirebaseNotifications(notificationArgs: $notificationArgs) {\n    pageEdges {\n      node {\n        club\n        clubId\n        createdAt\n        id\n        isRead\n        isViewed\n        redirectLink\n        title\n        type\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetFirebaseNotifications($notificationArgs: notificationArgument) {
  getFirebaseNotifications(notificationArgs: $notificationArgs) {
    pageEdges {
      node {
        club
        clubId
        createdAt
        id
        isRead
        isViewed
        redirectLink
        title
        type
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;notificationArgs&quot;: {
    &quot;take&quot;: 20,
    &quot;userId&quot;: ${id}
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2OTcxNzYxMDYsImV4cCI6MTY5OTc2ODEwNiwicHJtIjoiYmVlM2ExNGVjNWViZGE2NjBkMzllMzlhY2Y3NzE3NzUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIyYWRhYzNmZS1mNGZmLTQ5OTgtOTZiNy1iZDJiMTAwZGUxZjUifQ.jDMt0tmNCbgdngDGUmYgZ1nyo9Cnmz1Njm4OHfSUK-X0G29AMFdLmBMbrOh91RzZF-RiYkJHXvvTL915PpaLfBFqg7wA7GlypxIRFe70DRQx3pu7cDLAB7rr50szSj5xadj34CXs-CTMOc8xDg4a54UmG5aCCaEohBRiTt44_zLDeOXZ9a-EnaSTqxmS3SzK4mKr1Lgc3ejVZqMdr_PbBSs5fNYHsEGfabJ9rk_PPERyTP7Rz-Y_CTXHZcbUdKXkCGT4gc3U_nvDiJanhxuqabyHErh_eIwTrIBfsOEn0-u3K6MW2SJHPHSBzBDP9CKv6Ge_qfKOYp07KpE-S-PTAQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddFreeOptionalSubscription" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;freeOptionalSubscriptionArgument&quot;: {
      &quot;subscriptionId&quot;: 0,
      &quot;clubId&quot;: ${clubId},
      &quot;selectedTeam&quot;: &quot;[]&quot;,
      &quot;isOptionalSub&quot;: false,
	 &quot;userId&quot;: ${id}
	}
},&quot;query&quot;:&quot;mutation AddFreeOptionalSubscription(\n    $freeOptionalSubscriptionArgument: freeOptionalSubscriptionArgument!\n  ) {\n    addFreeOptionalSubscription(freeOptionalSubscriptionArgument: $freeOptionalSubscriptionArgument){\n      status\n      message\n    }\n  }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddFreeOptionalSubscription(
    $freeOptionalSubscriptionArgument: freeOptionalSubscriptionArgument!
  ) {
    addFreeOptionalSubscription(freeOptionalSubscriptionArgument: $freeOptionalSubscriptionArgument){
      status
      message
    }
  }
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;freeOptionalSubscriptionArgument&quot;: {
      &quot;subscriptionId&quot;: 0,
      &quot;clubId&quot;: ${clubId},
      &quot;selectedTeam&quot;: &quot;[]&quot;,
      &quot;isOptionalSub&quot;: false,
	 &quot;userId&quot;: ${id}
	}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2OTcxNzYxMDYsImV4cCI6MTY5OTc2ODEwNiwicHJtIjoiYmVlM2ExNGVjNWViZGE2NjBkMzllMzlhY2Y3NzE3NzUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIyYWRhYzNmZS1mNGZmLTQ5OTgtOTZiNy1iZDJiMTAwZGUxZjUifQ.jDMt0tmNCbgdngDGUmYgZ1nyo9Cnmz1Njm4OHfSUK-X0G29AMFdLmBMbrOh91RzZF-RiYkJHXvvTL915PpaLfBFqg7wA7GlypxIRFe70DRQx3pu7cDLAB7rr50szSj5xadj34CXs-CTMOc8xDg4a54UmG5aCCaEohBRiTt44_zLDeOXZ9a-EnaSTqxmS3SzK4mKr1Lgc3ejVZqMdr_PbBSs5fNYHsEGfabJ9rk_PPERyTP7Rz-Y_CTXHZcbUdKXkCGT4gc3U_nvDiJanhxuqabyHErh_eIwTrIBfsOEn0-u3K6MW2SJHPHSBzBDP9CKv6Ge_qfKOYp07KpE-S-PTAQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddFreeOptionalSubscription" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;freeOptionalSubscriptionArgument&quot;: {
      &quot;subscriptionId&quot;: 0,
      &quot;clubId&quot;: ${ClubId},
      &quot;selectedTeam&quot;: &quot;[]&quot;,
      &quot;isOptionalSub&quot;: false,
	 &quot;userId&quot;: ${userId}
	}
},&quot;query&quot;:&quot;mutation AddFreeOptionalSubscription(\n    $freeOptionalSubscriptionArgument: freeOptionalSubscriptionArgument!\n  ) {\n    addFreeOptionalSubscription(freeOptionalSubscriptionArgument: $freeOptionalSubscriptionArgument){\n      status\n      message\n    }\n  }&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.club.stress.nxlvl.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation AddFreeOptionalSubscription(
    $freeOptionalSubscriptionArgument: freeOptionalSubscriptionArgument!
  ) {
    addFreeOptionalSubscription(freeOptionalSubscriptionArgument: $freeOptionalSubscriptionArgument){
      status
      message
    }
  }
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;freeOptionalSubscriptionArgument&quot;: {
      &quot;subscriptionId&quot;: 0,
      &quot;clubId&quot;: ${ClubId},
      &quot;selectedTeam&quot;: &quot;[]&quot;,
      &quot;isOptionalSub&quot;: false,
	 &quot;userId&quot;: ${userId}
	}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkwMDQsInBlcm0iOiIiLCJpYXQiOjE2OTcxNzYxMDYsImV4cCI6MTY5OTc2ODEwNiwicHJtIjoiYmVlM2ExNGVjNWViZGE2NjBkMzllMzlhY2Y3NzE3NzUiLCJqaWQiOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdkBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3B3eDU2OTk5MjBqMmEyZGt3bndwdiIsInVrZXkiOiI1ZmEyNDcwZi04ZWIwLTQyZGItYTQ1Ni01MTY2OTY5ZGRhNTYiLCJjbGllbnQiOiIiLCJqdGkiOiIyYWRhYzNmZS1mNGZmLTQ5OTgtOTZiNy1iZDJiMTAwZGUxZjUifQ.jDMt0tmNCbgdngDGUmYgZ1nyo9Cnmz1Njm4OHfSUK-X0G29AMFdLmBMbrOh91RzZF-RiYkJHXvvTL915PpaLfBFqg7wA7GlypxIRFe70DRQx3pu7cDLAB7rr50szSj5xadj34CXs-CTMOc8xDg4a54UmG5aCCaEohBRiTt44_zLDeOXZ9a-EnaSTqxmS3SzK4mKr1Lgc3ejVZqMdr_PbBSs5fNYHsEGfabJ9rk_PPERyTP7Rz-Y_CTXHZcbUdKXkCGT4gc3U_nvDiJanhxuqabyHErh_eIwTrIBfsOEn0-u3K6MW2SJHPHSBzBDP9CKv6Ge_qfKOYp07KpE-S-PTAQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
