<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="false">
        <stringProp name="filename">D:\NXLVL\Marketplace\Stress_Data\CSV_DATA\NFT_BuyerID.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">id,username,email</stringProp>
        <boolProp name="randomOrder">true</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="false">
        <stringProp name="filename">D:\NXLVL\Marketplace\Stress_Data\CSV_DATA\nftEditionId_sellerId.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">nftEditionId,sellerId</stringProp>
        <boolProp name="randomOrder">true</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="false">
        <stringProp name="filename">nftEditionId.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">nftEditionId</stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">25</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">910</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Login" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;query&quot;:&quot;mutation {\n  login(\n    loginInput: {\n      email: \&quot;${email}\&quot;\n      password: \&quot;QWRtaW5AMTIz\&quot;\n    }\n  ) {\n    accessToken\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation {
  login(
    loginInput: {
      email: &quot;${email}&quot;
      password: &quot;QWRtaW5AMTIz&quot;
    }
  ) {
    accessToken
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjQ0MDkwLCJwZXJtIjoiIiwiaWF0IjoxNjc1MTYzODcwLCJleHAiOjE2Nzc3NTU4NzAsInBybSI6ImI4ZjY5OGJhZjdkMTQ5ZDYwMDY1YzAyNzZhMWRkOWQxIiwiamlkIjoiY2xidXAyZHJzMDAwMjBqenl1M3F5a2FwY0Bsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1cDJkcnMwMDAyMGp6eXUzcXlrYXBjIiwidWtleSI6IjRmMTI1MmYxLWRjY2ItNGYyYi1iZDg1LWYwZTBjMTczNzljNyIsImNsaWVudCI6IiIsImp0aSI6Ijg5M2FlNGUwLWY4ZTAtNDZkMS04Njk5LWQwNWUyOGM3ODhlOSJ9.qF9ZhwFl45IK_eyAr0VfXZgeD2ZoQQ3JDsXWscJ89sp6j0bDR7xsL13at5z_pp1fxKAcvna0dBX8E1Khd98ISF6e-Ja9dpmHbs_wYdGSJKNYY5S_4CL_g6BogW4LhSgmTA87pQIvKvGKr6VRReSBrEVOJ01Tm9rn2PQi2D9zp7yS3NJuOyW_I5W-PQjZfqZ3cuBQi5xzJ87uTMCSRxRnwK3xV12sWgbPRg0Sum_kVmAwltuvZZ_9vYvMvo_7zgvPyqytTZxwbDxfFbtrSQYoKIJaCed1092I5ufWM8hIjQzpozeX72vHZcE4nhhYr1cjxRBzvopX7--2KI6mw4cpYw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">auth_token ; user_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..accessToken ; $..userId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">TokenNotFound ; useridnotfound</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sParse_accessToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sParse_accessToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;accessToken&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">sParse_accessToken_NF</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="BuyNFT" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;paymentArgument&quot;: {
    &quot;buyerId&quot;: ${id},
    &quot;nftEditionId&quot;: ${nftEditionId},
    &quot;quantity&quot;: 10,
    &quot;sellerId&quot;: ${sellerId},
    &quot;totalPrice&quot;: 41.2
  }
},&quot;query&quot;:&quot;mutation BuyNFT($paymentArgument: PaymentArgument!) {\n  buyNFT(paymentArgument: $paymentArgument) {\n    message\n    orderId\n    status\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation BuyNFT($paymentArgument: PaymentArgument!) {
  buyNFT(paymentArgument: $paymentArgument) {
    message
    orderId
    status
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;paymentArgument&quot;: {
    &quot;buyerId&quot;: ${id},
    &quot;nftEditionId&quot;: ${nftEditionId},
    &quot;quantity&quot;: 10,
    &quot;sellerId&quot;: ${sellerId},
    &quot;totalPrice&quot;: 41.2
  }
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${sParse_accessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getNFTEditionActivities" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;nftEditionId&quot;: 50680,
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
},&quot;query&quot;:&quot;query getNFTEditionActivities(\n  $nftEditionId: Int!\n  $sortBy: sortByActivityType\n  $take: Int\n  $cursor: Int\n) {\n  getNFTEditionActivities(\n    nftActivitiesArgs: {\n      nftEditionId: $nftEditionId\n      cursor: $cursor\n      take: $take\n      sortBy: $sortBy\n    }\n  ) {\n    pageEdges {\n      node {\n        id\n        type\n        nftId\n        nftEditionId\n        nftEdition {\n          price\n        }\n        buyerId\n        buyer {\n          id\n          firstname\n          lastname\n          profileImage\n        }\n        sellerId\n        seller {\n          id\n          firstname\n          lastname\n          profileImage\n        }\n        qty\n        price\n        createdAt\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getNFTEditionActivities(
  $nftEditionId: Int!
  $sortBy: sortByActivityType
  $take: Int
  $cursor: Int
) {
  getNFTEditionActivities(
    nftActivitiesArgs: {
      nftEditionId: $nftEditionId
      cursor: $cursor
      take: $take
      sortBy: $sortBy
    }
  ) {
    pageEdges {
      node {
        id
        type
        nftId
        nftEditionId
        nftEdition {
          price
        }
        buyerId
        buyer {
          id
          firstname
          lastname
          profileImage
        }
        sellerId
        seller {
          id
          firstname
          lastname
          profileImage
        }
        qty
        price
        createdAt
      }
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;nftEditionId&quot;: 50680,
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjkxMDIsInBlcm0iOiIiLCJpYXQiOjE2OTA1MzU3MTMsImV4cCI6MTY5MzEyNzcxMywicHJtIjoiMTFiYjcwN2ZhZDk3MDZhOWMwZGU1YjlkNmE2YjkxOWYiLCJqaWQiOiJjbGJ1Z3FsNjI1NDE5OTBrMmtjcnl0Z2IzNUBsb2NhbGhvc3QiLCJtaW0iOiJjbGJ1Z3FsNjI1NDE5OTBrMmtjcnl0Z2IzNSIsInVrZXkiOiI5ZmViMGY1OC0yM2VmLTQ4MTktOThjMS03Njg0MGIzNTY5YWYiLCJjbGllbnQiOiIiLCJqdGkiOiIzZTZkN2E0YS04ZWQ0LTQyOTQtODg1YS05YmJlNmZiNWE0MzkifQ.QMoSrP2XADFBcAWmZv5IRmV4lBQbcSE_JK-vaB_QDSYj6hcE5zivbJKL9MS0CJBFWgdP8R3OqGSpg9nV9HNQjDFu_nsf7o_JesLdn6ir11wgnw1z8SaKqxhSA3tzLzmLuua39gYiqyYEl16ZiZIAvg3C0NlYWhYnOCDY72rGYjV7KxGQRld7ZUVf8vElVWKA3sheY27ebjQoB8Qeso1eNYEc8LyZnfYgCoJfefgoUGFcRoLphDk6gJpkqc9UAVVUNLlaKfMyq8KrHE_OADMEZL-TmYETY-vLn6cJ4HSNdvLWGTkykYIoZIjsqwl9qfSYd3yvG6JAn771Py1_d8_96Q</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getNFTEditionActivities" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;nftEditionId&quot;: ${nftEditionId},
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
},&quot;query&quot;:&quot;query getNFTEditionActivities(\n  $nftEditionId: Int!\n  $sortBy: sortByActivityType\n  $take: Int\n  $cursor: Int\n) {\n  getNFTEditionActivities(\n    nftActivitiesArgs: {\n      nftEditionId: $nftEditionId\n      cursor: $cursor\n      take: $take\n      sortBy: $sortBy\n    }\n  ) {\n    pageEdges {\n      node {\n        id\n        type\n        nftId\n        nftEditionId\n        nftEdition {\n          price\n        }\n        buyerId\n        buyer {\n          id\n          firstname\n          lastname\n          profileImage\n        }\n        sellerId\n        seller {\n          id\n          firstname\n          lastname\n          profileImage\n        }\n        qty\n        price\n        createdAt\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getNFTEditionActivities(
  $nftEditionId: Int!
  $sortBy: sortByActivityType
  $take: Int
  $cursor: Int
) {
  getNFTEditionActivities(
    nftActivitiesArgs: {
      nftEditionId: $nftEditionId
      cursor: $cursor
      take: $take
      sortBy: $sortBy
    }
  ) {
    pageEdges {
      node {
        id
        type
        nftId
        nftEditionId
        nftEdition {
          price
        }
        buyerId
        buyer {
          id
          firstname
          lastname
          profileImage
        }
        sellerId
        seller {
          id
          firstname
          lastname
          profileImage
        }
        qty
        price
        createdAt
      }
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;nftEditionId&quot;: ${nftEditionId},
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getNFTById" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;id&quot;: 51117
},&quot;query&quot;:&quot;query getNFTById($id: Int!) {\n  getNFTById(id: $id) {\n    id\n    name\n    likeCount\n    imageUrl\n    videoData\n    isLiked\n    isReported\n    viewCount\n    isAnyEditionMinted\n    isActive\n    user {\n      id\n      firstname\n      lastname\n      username\n      profileImage\n      dwollaCustomer {\n        status\n      }\n    }\n    description\n    activitiesOnNfts {\n      activityId\n      activity {\n        id\n        name\n      }\n    }\n    nftMultiAssetMedia {\n      id\n      imageUrl\n      order\n      isDefault\n      passthroughId\n      videoData\n    }\n    editions(nftStatus: Listed) {\n      id\n      autoGenerated\n      seriesNumber\n      price\n      left\n      size\n      tier\n      status\n      isBookmarked\n      minted\n      txHash\n      listedDate\n      updatedAt\n      forSale\n      minPrice\n      ownedEditions\n      ownedEditionsDetail {\n        forSale\n        forSaleQty\n        qty\n        qtyLeft\n        sellingPrice\n        lastSoldPrice\n      }\n      royaltyFee\n      CoRoyaltyUser {\n        coRoyaltyFee\n        userId\n        user {\n          id\n          firstname\n          lastname\n          username\n          profileImage\n          dwollaCustomer {\n            status\n          }\n        }\n      }\n      inProgressQuantity\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getNFTById($id: Int!) {
  getNFTById(id: $id) {
    id
    name
    likeCount
    imageUrl
    videoData
    isLiked
    isReported
    viewCount
    isAnyEditionMinted
    isActive
    user {
      id
      firstname
      lastname
      username
      profileImage
      dwollaCustomer {
        status
      }
    }
    description
    activitiesOnNfts {
      activityId
      activity {
        id
        name
      }
    }
    nftMultiAssetMedia {
      id
      imageUrl
      order
      isDefault
      passthroughId
      videoData
    }
    editions(nftStatus: Listed) {
      id
      autoGenerated
      seriesNumber
      price
      left
      size
      tier
      status
      isBookmarked
      minted
      txHash
      listedDate
      updatedAt
      forSale
      minPrice
      ownedEditions
      ownedEditionsDetail {
        forSale
        forSaleQty
        qty
        qtyLeft
        sellingPrice
        lastSoldPrice
      }
      royaltyFee
      CoRoyaltyUser {
        coRoyaltyFee
        userId
        user {
          id
          firstname
          lastname
          username
          profileImage
          dwollaCustomer {
            status
          }
        }
      }
      inProgressQuantity
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;id&quot;: 51117
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getNFTItems" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;nftEditionId&quot;: 51117,
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
},&quot;query&quot;:&quot;query getNFTItems(\n  $nftEditionId: Int!\n  $sortBy: sortByType\n  $take: Int\n  $cursor: Int\n) {\n  getNFTItems(\n    nftItemArgs: {\n      nftEditionId: $nftEditionId\n      cursor: $cursor\n      take: $take\n      sortBy: $sortBy\n    }\n  ) {\n    pageEdges {\n      node {\n        id\n        userId\n        user {\n          id\n          firstname\n          lastname\n          profileImage\n          dwollaCustomer {\n            status\n          }\n        }\n        qty\n        qtyLeft\n        forSaleQty\n        createdAt\n        updatedAt\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getNFTItems(
  $nftEditionId: Int!
  $sortBy: sortByType
  $take: Int
  $cursor: Int
) {
  getNFTItems(
    nftItemArgs: {
      nftEditionId: $nftEditionId
      cursor: $cursor
      take: $take
      sortBy: $sortBy
    }
  ) {
    pageEdges {
      node {
        id
        userId
        user {
          id
          firstname
          lastname
          profileImage
          dwollaCustomer {
            status
          }
        }
        qty
        qtyLeft
        forSaleQty
        createdAt
        updatedAt
      }
    }
    pageInfo {
      hasNextPage
      totalCount
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;nftEditionId&quot;: 51117,
  &quot;take&quot;: 5,
  &quot;sortBy&quot;: &quot;Newest&quot;,
  &quot;cursor&quot;: 0
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getNFTEdition" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;userId&quot;: 210428,
  &quot;nftEditionStatus&quot;: &quot;Listed&quot;,
  &quot;take&quot;: 11
},&quot;query&quot;:&quot;query getNFTEdition(\n  $nftEditionStatus: NFTEditionStatus\n  $activityIds: [Int]\n  $sortBy: NFTSortBy\n  $tiers: [NFTEditionTier]\n  $userId: Int\n  $take: Int\n  $cursor: Int\n  $pageNo: Int\n  $priceRange: PriceRange\n  $isForSale: Boolean\n) {\n  getNFTEdition(\n    getNFTEditionsArgs: {\n      nftEditionStatus: $nftEditionStatus\n      activityIds: $activityIds\n      sortBy: $sortBy\n      tiers: $tiers\n      userId: $userId\n      take: $take\n      cursor: $cursor\n      pageNo: $pageNo\n      priceRange: $priceRange\n      isForSale: $isForSale\n    }\n  ) {\n    pageEdges {\n      node {\n        id\n        associatedTiers(nftEditionStatus: $nftEditionStatus, userId: $userId)\n        tier\n        status\n        createdAt\n        isRelisted\n        isBookmarked\n        seriesNumber\n        nftId\n        price\n        left\n        size\n        tier\n        autoGenerated\n        nft {\n          id\n          description\n          name\n          isNFTBookmarked\n          isLiked\n          likeCount\n          imageUrl\n          videoData\n          viewCount\n          user {\n            id\n            firstname\n            lastname\n            username\n            profileImage\n            dwollaCustomer {\n              status\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      totalCount\n      pageNo\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getNFTEdition(
  $nftEditionStatus: NFTEditionStatus
  $activityIds: [Int]
  $sortBy: NFTSortBy
  $tiers: [NFTEditionTier]
  $userId: Int
  $take: Int
  $cursor: Int
  $pageNo: Int
  $priceRange: PriceRange
  $isForSale: Boolean
) {
  getNFTEdition(
    getNFTEditionsArgs: {
      nftEditionStatus: $nftEditionStatus
      activityIds: $activityIds
      sortBy: $sortBy
      tiers: $tiers
      userId: $userId
      take: $take
      cursor: $cursor
      pageNo: $pageNo
      priceRange: $priceRange
      isForSale: $isForSale
    }
  ) {
    pageEdges {
      node {
        id
        associatedTiers(nftEditionStatus: $nftEditionStatus, userId: $userId)
        tier
        status
        createdAt
        isRelisted
        isBookmarked
        seriesNumber
        nftId
        price
        left
        size
        tier
        autoGenerated
        nft {
          id
          description
          name
          isNFTBookmarked
          isLiked
          likeCount
          imageUrl
          videoData
          viewCount
          user {
            id
            firstname
            lastname
            username
            profileImage
            dwollaCustomer {
              status
            }
          }
        }
      }
    }
    pageInfo {
      hasNextPage
      totalCount
      pageNo
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: 210428,
  &quot;nftEditionStatus&quot;: &quot;Listed&quot;,
  &quot;take&quot;: 11
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getTransaction" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
  &quot;id&quot;: 209908,
  &quot;take&quot;: 10,
  &quot;cursor&quot;: 0
},&quot;query&quot;:&quot;query getTransaction($id: Int!, $cursor: Int, $take: Int) {\n  getTransactionPDP(id: $id, cursor: $cursor, take: $take) {\n    pageInfo {\n      totalCount\n      hasNextPage\n    }\n    pageEdges {\n      node {\n        id\n        createdAt\n        updatedAt\n        type\n        paymentType\n        price\n        qty\n        transferHash\n        totalPrice\n        sellerFee\n        buyerFee\n        buyer {\n          id\n          firstname\n          lastname\n          profileImage\n          dwollaCustomer {\n            status\n          }\n        }\n        seller {\n          id\n          firstname\n          lastname\n          profileImage\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">routers.stress.nxlvldev.app</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getTransaction($id: Int!, $cursor: Int, $take: Int) {
  getTransactionPDP(id: $id, cursor: $cursor, take: $take) {
    pageInfo {
      totalCount
      hasNextPage
    }
    pageEdges {
      node {
        id
        createdAt
        updatedAt
        type
        paymentType
        price
        qty
        transferHash
        totalPrice
        sellerFee
        buyerFee
        buyer {
          id
          firstname
          lastname
          profileImage
          dwollaCustomer {
            status
          }
        }
        seller {
          id
          firstname
          lastname
          profileImage
        }
      }
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;id&quot;: 209908,
  &quot;take&quot;: 10,
  &quot;cursor&quot;: 0
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IndGSm1EY0h3ZVludDZLaGlDYmJPZloxNnVnVjJNM044NnRXSFp2RERWQ1EifQ.eyJ1aWQiOjI3NCwicGVybSI6IiIsImlhdCI6MTY4Nzg2Mzg1NSwiZXhwIjoxNjkwNDU1ODU1LCJwcm0iOiJhY2U2ZmY4MWE5YTExNTIxOWY1ZTdmMGQ0YmFkZWU0MCIsImppZCI6ImNsNGk2OHYwYTA5ODI0ZzAyZDB3eW5qZW1AbG9jYWxob3N0IiwibWltIjoiY2w0aTY4djBhMDk4MjRnMDJkMHd5bmplbSIsInVrZXkiOiIzN2I3NWQ4Ny1mMTdiLTRmMmUtYmI3NS02MGMwMjkyMWJjNjUiLCJjbGllbnQiOiIiLCJqdGkiOiI0MmJhMTk5MS1lMzg2LTQxMGItYTQ4Yi00MDVlN2I5ODQ4OTAifQ.GT1yoKx9d_sTBbRFmKMLqqB8GdEswAKG7lKTbJb8-_GBsWhNSp0s9FPCZERh9e4hyUQf1Ct0_He2Ad4NdLp7WIXiyUifkSmdMeRn44Ufei6IEC0gr1COIvQBpfQzkPzkvo6lhVIPig3HusAVCEZyCLN_ZPTFqxm4bDIkCUwz6JyqEYctL-nHJAoutS9NK-6VcYjoC5o9jxuKPa1_6VCvVqXFo9oUB1VEe53sFHnT34ud5DSoKg2olkTPezNdCLSB81kxfYAi3BXBi3GolYZsltODrAxxNBGZ2YDQ5eULIjO_kGteAJiNj0vgxytFk1PATK9AmQvgZ5fdmrmNq-ZPaw</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
